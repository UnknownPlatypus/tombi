FAIL valid/array/array
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       ints = [1, 2, 3, ]
       floats = [1.1, 2.1, 3.1]
       strings = ["a", "b", "c"]
       dates = [
         1987-07-05T17:45:00Z,
         1979-05-27T07:32:00Z,
         2006-06-01T11:00:00Z,
       ]
       comments = [
                1,
                2, #this is ok
       ]

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/array/array-subtables
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       [[arr]]
       [arr.subtab]
       val=1

       [[arr]]
       [arr.subtab]
       val=2

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/array/bool
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       a = [true, false]

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/array/empty
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       thevoid = [[[[[]]]]]

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/array/hetergeneous
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       mixed = [[1, 2], ["a", "b"], [1.1, 2.1]]

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/array/mixed-int-array
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       arrays-and-ints =  [1, ["Arrays are not integers."]]

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/array/mixed-int-float
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       ints-and-floats = [1, 1.1]

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/array/mixed-int-string
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       strings-and-ints = ["hi", 42]

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/array/mixed-string-table
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       contributors = [
         "Foo Bar <foo@example.com>",
         { name = "Baz Qux", email = "bazqux@example.com", url = "https://example.com/bazqux" }
       ]

       # Start with a table as the first element. This tests a case that some libraries
       # might have where they will check if the first entry is a table/map/hash/assoc
       # array and then encode it as a table array. This was a reasonable thing to do
       # before TOML 1.0 since arrays could only contain one type, but now it's no
       # longer.
       mixed = [{k="a"}, "b", 1]

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/array/nested
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       nest = [["a"], ["b"]]

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/array/nested-double
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       nest = [
       	[
       		["a"],
       		[1, 2, [3]]
       	]
       ]

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/array/nested-inline-table
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       a = [ { b = {} } ]

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/array/nospaces
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       ints = [1,2,3]

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/array/open-parent-table
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       [[parent-table.arr]]
       [[parent-table.arr]]
       [parent-table]
       not-arr = 1

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/array/string-quote-comma
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       title = [
       "Client: \"XXXX\", Job: XXXX",
       "Code: XXXX"
       ]

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/array/string-quote-comma-2
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       title = [ " \", ",]

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/array/string-with-comma
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       title = [
       "Client: XXXX, Job: XXXX",
       "Code: XXXX"
       ]

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/array/string-with-comma-2
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       title = [
       """Client: XXXX,
       Job: XXXX""",
       "Code: XXXX"
       ]

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/array/strings
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       string_array = [ "all", 'strings', """are the same""", '''type''']

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/array/table-array-string-backslash
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       foo = [ { bar="\"{{baz}}\""} ]

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/array/trailing-comma
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       arr-1 = [1,]

       arr-2 = [2,3,]

       arr-3 = [4,
       ]

       arr-4 = [
       	5,
       	6,
       ]

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/bool/bool
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       t = true
       f = false

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/comment/after-literal-no-ws
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       inf=inf#infinity
       nan=nan#not a number
       true=true#true
       false=false#false

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/comment/at-eof
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       # This is a full-line comment
       key = "value" # This is a comment at the end of a line

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/comment/at-eof2
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       # This is a full-line comment
       key = "value" # This is a comment at the end of a line

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/comment/everywhere
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       # Top comment.
         # Top comment.
       # Top comment.

       # [no-extraneous-groups-please]

       [group] # Comment
       answer = 42 # Comment
       # no-extraneous-keys-please = 999
       # Inbetween comment.
       more = [ # Comment
         # What about multiple # comments?
         # Can you handle it?
         #
                 # Evil.
       # Evil.
         42, 42, # Comments within arrays are fun.
         # What about multiple # comments?
         # Can you handle it?
         #
                 # Evil.
       # Evil.
       # ] Did I fool you?
       ] # Hopefully not.

       # Make sure the space between the datetime and "#" isn't lexed.
       dt = 1979-05-27T07:32:12-07:00  # c
       d = 1979-05-27 # Comment

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/comment/noeol
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       # single comment without any eol characters

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/comment/nonascii
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       # ~ ¬Ä √ø Ìüø ÓÄÄ Ôøø êÄÄ Ùèøø

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/comment/tricky
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       [section]#attached comment
       #[notsection]
       one = "11"#cmt
       two = "22#"
       three = '#'

       four = """# no comment
       # nor this
       #also not comment"""#is_comment

       five = 5.5#66
       six = 6#7
       8 = "eight"
       #nine = 99
       ten = 10e2#1
       eleven = 1.11e1#23

       ["hash#tag"]
       "#!" = "hash bang"
       arr3 = [ "#", '#', """###""" ]
       arr4 = [ 1,# 9, 9,
       2#,9
       ,#9
       3#]
       ,4]
       arr5 = [[[[#["#"],
       ["#"]]]]#]
       ]
       tbl1 = { "#" = '}#'}#}}

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/datetime/datetime
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       space = 1987-07-05 17:45:00Z

       # ABNF is case-insensitive, both "Z" and "z" must be supported.
       lower = 1987-07-05t17:45:00z

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/datetime/edge
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       first-offset = 0001-01-01 00:00:00Z
       first-local  = 0001-01-01 00:00:00
       first-date   = 0001-01-01

       last-offset = 9999-12-31 23:59:59Z
       last-local  = 9999-12-31 23:59:59
       last-date   = 9999-12-31

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/datetime/leap-year
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       2000-datetime       = 2000-02-29 15:15:15Z
       2000-datetime-local = 2000-02-29 15:15:15
       2000-date           = 2000-02-29

       2024-datetime       = 2024-02-29 15:15:15Z
       2024-datetime-local = 2024-02-29 15:15:15
       2024-date           = 2024-02-29

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/datetime/local
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       local = 1987-07-05T17:45:00
       milli = 1977-12-21T10:32:00.555
       space = 1987-07-05 17:45:00

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/datetime/local-date
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       bestdayever = 1987-07-05

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/datetime/local-time
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       besttimeever = 17:45:00
       milliseconds = 10:32:00.555

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/datetime/milliseconds
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       utc1  = 1987-07-05T17:45:56.123Z
       utc2  = 1987-07-05T17:45:56.6Z
       wita1 = 1987-07-05T17:45:56.123+08:00
       wita2 = 1987-07-05T17:45:56.6+08:00

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/datetime/timezone
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       utc  = 1987-07-05T17:45:56Z
       pdt  = 1987-07-05T17:45:56-05:00
       nzst = 1987-07-05T17:45:56+12:00
       nzdt = 1987-07-05T17:45:56+13:00  # DST

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/empty-file
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
          <empty>

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/example
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       best-day-ever = 1987-07-05T17:45:00Z

       [numtheory]
       boring = false
       perfection = [6, 28, 496]

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/float/exponent
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       lower = 3e2
       upper = 3E2
       neg = 3e-2
       pos = 3E+2
       zero = 3e0
       pointlower = 3.1e2
       pointupper = 3.1E2
       minustenth = -1E-1

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/float/float
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       pi = 3.14
       pospi = +3.14
       negpi = -3.14
       zero-intpart = 0.123

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/float/inf-and-nan
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       # We don't encode +nan and -nan back with the signs; many languages don't
       # support a sign on NaN (it doesn't really make much sense).
       nan = nan
       nan_neg = -nan
       nan_plus = +nan
       infinity = inf
       infinity_neg = -inf
       infinity_plus = +inf

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/float/long
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       longpi = 3.141592653589793
       neglongpi = -3.141592653589793

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/float/max-int
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       # Maximum and minimum safe natural numbers.
       max_float =  9_007_199_254_740_991.0
       min_float = -9_007_199_254_740_991.0

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/float/underscore
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       before = 3_141.5927
       after = 3141.592_7
       exponent = 3e1_4

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/float/zero
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       zero = 0.0
       signed-pos = +0.0
       signed-neg = -0.0
       exponent = 0e0
       exponent-two-0 = 0e00
       exponent-signed-pos = +0e0
       exponent-signed-neg = -0e0

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/implicit-and-explicit-after
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       [a.b.c]
       answer = 42

       [a]
       better = 43

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/implicit-and-explicit-before
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       [a]
       better = 43

       [a.b.c]
       answer = 42

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/implicit-groups
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       [a.b.c]
       answer = 42

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/inline-table/array
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       arr = [ {'a'= 1}, {'a'= 2} ]

       people = [{first_name = "Bruce", last_name = "Springsteen"},
                 {first_name = "Eric", last_name = "Clapton"},
                 {first_name = "Bob", last_name = "Seger"}]

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/inline-table/array-values
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       # "No newlines are allowed between the curly braces unless they are valid within
       # a value"

       a = { a = [
       ]}

       b = { a = [
       		1,
       		2,
       	], b = [
       		3,
       		4,
       	]}

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/inline-table/bool
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       a = {a = true, b = false}

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/inline-table/empty
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       empty1 = {}
       empty2 = { }
       empty_in_array = [ { not_empty = 1 }, {} ]
       empty_in_array2 = [{},{not_empty=1}]
       many_empty = [{},{},{}]
       nested_empty = {"empty"={}}
       with_cmt ={            }#nothing here

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/inline-table/end-in-bool
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       black = { python=">3.6", version=">=18.9b0", allow_prereleases=true }

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/inline-table/inline-table
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       name        = { first = "Tom", last = "Preston-Werner" }
       point       = { x = 1, y = 2 }
       simple      = { a = 1 }
       str-key     = { "a" = 1 }
       table-array = [{ "a" = 1 }, { "b" = 2 }]

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/inline-table/key-dotted-1
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       a = {   a.b  =  1   }
       b = {   "a"."b"  =  1   }
       c = {   a   .   b  =  1   }
       d = {   'a'   .   "b"  =  1   }
       e = {a.b=1}

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/inline-table/key-dotted-2
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       many.dots.here.dot.dot.dot = {a.b.c = 1, a.b.d = 2}

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/inline-table/key-dotted-3
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       [tbl]
       a.b.c = {d.e=1}

       [tbl.x]
       a.b.c = {d.e=1}

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/inline-table/key-dotted-4
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       [[arr]]
       t = {a.b=1}
       T = {a.b=1}

       [[arr]]
       t = {a.b=2}
       T = {a.b=2}

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/inline-table/key-dotted-5
     command timed out after 1s; increase -timeout if this isn't an infinite loop or pathological behaviour

     input sent to parser-cmd:
       arr-1 = [{a.b = 1}]
       arr-2 = ["str", {a.b = 1}]

       arr-3 = [{a.b = 1}, {a.b = 2}]
       arr-4 = ["str", {a.b = 1}, {a.b = 2}]

     output from parser-cmd (stdout):


     want:
          <empty>

FAIL valid/inline-table/key-dotted-6
     Malformed output from your encoder: float64 is not a string

     input sent to parser-cmd:
       top.dot.dot = [
       	{dot.dot.dot = 1},
       	{dot.dot.dot = 2},
       ]

     output from parser-cmd (stdout):
       {
         "top": {
           "dot": {
             "dot": [
               {
                 "dot": {
                   "dot": {
                     "dot": {"type": "integer", "value": 1}
                   }
                 }
               },
               {
                 "dot": {
                   "dot": {
                     "dot": {"type": "integer", "value": 2}
                   }
                 }
               }
             ]
           }
         }
       }

     want:
       {
           "top": {
               "dot": {
                   "dot": [
                       {
                           "dot": {
                               "dot": {
                                   "dot": {"type": "integer", "value": "1"}
                               }
                           }
                       },
                       {
                           "dot": {
                               "dot": {
                                   "dot": {"type": "integer", "value": "2"}
                               }
                           }
                       }
                   ]
               }
           }
       }

FAIL valid/inline-table/key-dotted-7
     Malformed output from your encoder: float64 is not a string

     input sent to parser-cmd:
       arr = [
       	{a.b = [{c.d = 1}]}
       ]

     output from parser-cmd (stdout):
       {
         "arr": [{
           "a": {"b": [{
             "c": {
               "d": {"type": "integer", "value": 1}
             }
           }]}
         }]
       }

     want:
       {
           "arr": [{
               "a": {"b": [{
                   "c": {
                       "d": {"type": "integer", "value": "1"}
                   }
               }]}
           }]
       }

FAIL valid/inline-table/multiline
     inline table must be single line
     Error: invalid toml
 
     Exit 1

     input sent to parser-cmd:
       tbl_multiline = { a = 1, b = """
       multiline
       """, c = """and yet
       another line""", d = 4 }

     output from parser-cmd (stderr):
       inline table must be single line
       Error: invalid toml

       Exit 1

     want:
          <empty>

FAIL valid/inline-table/nest
     Malformed output from your encoder: float64 is not a string

     input sent to parser-cmd:
       tbl_tbl_empty = { tbl_0 = {} }
       tbl_tbl_val   = { tbl_1 = { one = 1 } }
       tbl_arr_tbl   = { arr_tbl = [ { one = 1 } ] }
       arr_tbl_tbl   = [ { tbl = { one = 1 } } ]

       # Array-of-array-of-table is interesting because it can only
       # be represented in inline form.
       arr_arr_tbl_empty = [ [ {} ] ]
       arr_arr_tbl_val = [ [ { one = 1 } ] ]
       arr_arr_tbls  = [ [ { one = 1 }, { two = 2 } ] ]

     output from parser-cmd (stdout):
       {
         "arr_arr_tbl_empty": [[{}]],
         "arr_arr_tbl_val":   [[{
           "one": {"type": "integer", "value": 1}
         }]],
         "arr_arr_tbls":      [[
           {
             "one": {"type": "integer", "value": 1}
           },
           {
             "two": {"type": "integer", "value": 2}
           }
         ]],
         "arr_tbl_tbl":       [{
           "tbl": {
             "one": {"type": "integer", "value": 1}
           }
         }],
         "tbl_arr_tbl":       {"arr_tbl": [{
           "one": {"type": "integer", "value": 1}
         }]},
         "tbl_tbl_empty": {
           "tbl_0": {}
         },
         "tbl_tbl_val": {
           "tbl_1": {
             "one": {"type": "integer", "value": 1}
           }
         }
       }

     want:
       {
           "arr_arr_tbl_empty": [[{}]],
           "arr_arr_tbl_val":   [[{
               "one": {"type": "integer", "value": "1"}
           }]],
           "arr_arr_tbls":      [[
               {
                   "one": {"type": "integer", "value": "1"}
               },
               {
                   "two": {"type": "integer", "value": "2"}
               }
           ]],
           "arr_tbl_tbl":       [{
               "tbl": {
                   "one": {"type": "integer", "value": "1"}
               }
           }],
           "tbl_arr_tbl":       {"arr_tbl": [{
               "one": {"type": "integer", "value": "1"}
           }]},
           "tbl_tbl_empty": {
               "tbl_0": {}
           },
           "tbl_tbl_val": {
               "tbl_1": {
                   "one": {"type": "integer", "value": "1"}
               }
           }
       }

FAIL valid/inline-table/spaces
     exit status 101

     input sent to parser-cmd:
       # https://github.com/toml-lang/toml-test/issues/146
       clap-1 = { version = "4"  , features = ["derive", "cargo"] }

       # Contains some literal tabs!
       clap-2 = { version = "4"	   	,	  	features = [   "derive" 	  ,  	  "cargo"   ]   , nest   =   {  	  "a"   =   'x'  , 	  'b'   = [ 1.5    ,   9.0  ]  }  }

     output from parser-cmd (stderr):
       thread 'main' panicked at crates/text/src/lib.rs:45:14:
       begin <= end (1 <= 0) when slicing `a`
       note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

     want:
          <empty>

FAIL valid/integer/float64-max
     invalid integer: invalid digit found in string
     invalid integer: invalid digit found in string
     Error: invalid toml
 
     Exit 1

     input sent to parser-cmd:
       # Maximum and minimum safe float64 natural numbers. Mainly here for
       # -int-as-float.
       max_int =  9_007_199_254_740_991
       min_int = -9_007_199_254_740_991

     output from parser-cmd (stderr):
       invalid integer: invalid digit found in string
       invalid integer: invalid digit found in string
       Error: invalid toml

       Exit 1

     want:
          <empty>

FAIL valid/integer/integer
     Malformed output from your encoder: float64 is not a string

     input sent to parser-cmd:
       answer = 42
       posanswer = +42
       neganswer = -42
       zero = 0

     output from parser-cmd (stdout):
       {
         "answer":    {"type": "integer", "value": 42},
         "neganswer": {"type": "integer", "value": -42},
         "posanswer": {"type": "integer", "value": 42},
         "zero":      {"type": "integer", "value": 0}
       }

     want:
       {
           "answer":    {"type": "integer", "value": "42"},
           "neganswer": {"type": "integer", "value": "-42"},
           "posanswer": {"type": "integer", "value": "42"},
           "zero":      {"type": "integer", "value": "0"}
       }

FAIL valid/integer/literals
     invalid integer: invalid digit found in string
     invalid integer: invalid digit found in string
     invalid integer: invalid digit found in string
     Error: invalid toml
 
     Exit 1

     input sent to parser-cmd:
       bin1 = 0b11010110
       bin2 = 0b1_0_1

       oct1 = 0o01234567
       oct2 = 0o755
       oct3 = 0o7_6_5

       hex1 = 0xDEADBEEF
       hex2 = 0xdeadbeef
       hex3 = 0xdead_beef
       hex4 = 0x00987

     output from parser-cmd (stderr):
       invalid integer: invalid digit found in string
       invalid integer: invalid digit found in string
       invalid integer: invalid digit found in string
       Error: invalid toml

       Exit 1

     want:
          <empty>

FAIL valid/integer/long
     Malformed output from your encoder: float64 is not a string

     input sent to parser-cmd:
       # int64 "should" be supported, but is not mandatory. It's fine to skip this
       # test.
       int64-max     = 9223372036854775807
       int64-max-neg = -9223372036854775808

     output from parser-cmd (stdout):
       {
         "int64-max":     {"type": "integer", "value": 9223372036854775808},
         "int64-max-neg": {"type": "integer", "value": -9223372036854775808}
       }

     want:
       {
           "int64-max":     {"type": "integer", "value": "9223372036854775807"},
           "int64-max-neg": {"type": "integer", "value": "-9223372036854775808"}
       }

FAIL valid/integer/underscore
     invalid integer: invalid digit found in string
     invalid integer: invalid digit found in string
     Error: invalid toml
 
     Exit 1

     input sent to parser-cmd:
       kilo = 1_000
       x = 1_1_1_1

     output from parser-cmd (stderr):
       invalid integer: invalid digit found in string
       invalid integer: invalid digit found in string
       Error: invalid toml

       Exit 1

     want:
          <empty>

FAIL valid/integer/zero
     Malformed output from your encoder: float64 is not a string

     input sent to parser-cmd:
       d1 = 0
       d2 = +0
       d3 = -0

       h1 = 0x0
       h2 = 0x00
       h3 = 0x00000

       o1 = 0o0
       a2 = 0o00
       a3 = 0o00000

       b1 = 0b0
       b2 = 0b00
       b3 = 0b00000

     output from parser-cmd (stdout):
       {
         "a2": {"type": "integer", "value": 0},
         "a3": {"type": "integer", "value": 0},
         "b1": {"type": "integer", "value": 0},
         "b2": {"type": "integer", "value": 0},
         "b3": {"type": "integer", "value": 0},
         "d1": {"type": "integer", "value": 0},
         "d2": {"type": "integer", "value": 0},
         "d3": {"type": "integer", "value": 0},
         "h1": {"type": "integer", "value": 0},
         "h2": {"type": "integer", "value": 0},
         "h3": {"type": "integer", "value": 0},
         "o1": {"type": "integer", "value": 0}
       }

     want:
       {
           "a2": {"type": "integer", "value": "0"},
           "a3": {"type": "integer", "value": "0"},
           "b1": {"type": "integer", "value": "0"},
           "b2": {"type": "integer", "value": "0"},
           "b3": {"type": "integer", "value": "0"},
           "d1": {"type": "integer", "value": "0"},
           "d2": {"type": "integer", "value": "0"},
           "d3": {"type": "integer", "value": "0"},
           "h1": {"type": "integer", "value": "0"},
           "h2": {"type": "integer", "value": "0"},
           "h3": {"type": "integer", "value": "0"},
           "o1": {"type": "integer", "value": "0"}
       }

FAIL valid/key/alphanum
     invalid number
     unknown line
     Error: invalid toml
 
     Exit 1

     input sent to parser-cmd:
       alpha = "a"
       123 = "num"
       000111 = "leading"
       10e3 = "false float"
       one1two2 = "mixed"
       with-dash = "dashed"
       under_score = "___"
       34-11 = 23

       [2018_10]
       001 = 1

       [a-a-a]
       _ = false

     output from parser-cmd (stderr):
       invalid number
       unknown line
       Error: invalid toml

       Exit 1

     want:
          <empty>

FAIL valid/key/case-sensitive
     exit status 101

     input sent to parser-cmd:
       sectioN = "NN"

       [section]
       name = "lower"
       NAME = "upper"
       Name = "capitalized"

       [Section]
       name = "different section!!"
       "Œº" = "greek small letter mu"
       "Œú" = "greek capital letter MU"
       M = "latin letter M"

     output from parser-cmd (stderr):
       thread 'main' panicked at crates/text/src/lib.rs:45:14:
       byte index 1 is not a char boundary; it is inside 'Œº' (bytes 0..2) of `Œº`
       note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

     want:
          <empty>

FAIL valid/key/dotted-1
     Malformed output from your encoder: float64 is not a string

     input sent to parser-cmd:
       name.first = "Arthur"
       "name".'last' = "Dent"

       many.dots.dot.dot.dot = 42

     output from parser-cmd (stdout):
       {
         "many": {
           "dots": {
             "dot": {
               "dot": {
                 "dot": {"type": "integer", "value": 42}
               }
             }
           }
         },
         "name": {
           "as":    {"type": "string", "value": "Dent"},
           "first": {"type": "string", "value": "Arthur"}
         }
       }

     want:
       {
           "many": {
               "dots": {
                   "dot": {
                       "dot": {
                           "dot": {"type": "integer", "value": "42"}
                       }
                   }
               }
           },
           "name": {
               "first": {"type": "string", "value": "Arthur"},
               "last":  {"type": "string", "value": "Dent"}
           }
       }

FAIL valid/key/dotted-2
     exit status 101

     input sent to parser-cmd:
       # Note: this file contains literal tab characters.

       # Space are ignored, and key parts can be quoted.
       count.a       = 1
       count . b     = 2
       "count"."c"   = 3
       "count" . "d" = 4
       'count'.'e'   = 5
       'count' . 'f' = 6
       "count".'g'   = 7
       "count" . 'h' = 8
       count.'i'     = 9
       count 	.	 'j'	   = 10
       "count".k     = 11
       "count" . l   = 12

     output from parser-cmd (stderr):
       thread 'main' panicked at crates/text/src/lib.rs:45:14:
       begin <= end (1 <= 0) when slicing `c`
       note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

     want:
          <empty>

FAIL valid/key/dotted-3
     Malformed output from your encoder: float64 is not a string

     input sent to parser-cmd:
       top.key = 1

       [tbl]
       a.b.c = 42.666

       [a.few.dots]
       polka.dot = "again?"
       polka.dance-with = "Dot"

     output from parser-cmd (stdout):
       {
         "a": {
           "few": {
             "dots": {
               "polka": {
                 "dance-with": {"type": "string", "value": "Dot"},
                 "dot":        {"type": "string", "value": "again?"}
               }
             }
           }
         },
         "tbl": {
           "a": {
             "b": {
               "c": {"type": "float", "value": 43}
             }
           }
         },
         "top": {
           "key": {"type": "integer", "value": 1}
         }
       }

     want:
       {
           "a": {
               "few": {
                   "dots": {
                       "polka": {
                           "dance-with": {"type": "string", "value": "Dot"},
                           "dot":        {"type": "string", "value": "again?"}
                       }
                   }
               }
           },
           "tbl": {
               "a": {
                   "b": {
                       "c": {"type": "float", "value": "42.666"}
                   }
               }
           },
           "top": {
               "key": {"type": "integer", "value": "1"}
           }
       }

FAIL valid/key/dotted-4
     Malformed output from your encoder: float64 is not a string

     input sent to parser-cmd:
       top.key = 1

       [[arr]]
       a.b.c=1
       a.b.d=2

       [[arr]]
       a.b.c=3
       a.b.d=4

     output from parser-cmd (stdout):
       {
         "arr": [
           {
             "a": {
               "b": {
                 "c": {"type": "integer", "value": 1},
                 "d": {"type": "integer", "value": 2}
               }
             }
           },
           {
             "a": {
               "b": {
                 "c": {"type": "integer", "value": 3},
                 "d": {"type": "integer", "value": 4}
               }
             }
           }
         ],
         "top": {
           "key": {"type": "integer", "value": 1}
         }
       }

     want:
       {
           "arr": [
               {
                   "a": {
                       "b": {
                           "c": {"type": "integer", "value": "1"},
                           "d": {"type": "integer", "value": "2"}
                       }
                   }
               },
               {
                   "a": {
                       "b": {
                           "c": {"type": "integer", "value": "3"},
                           "d": {"type": "integer", "value": "4"}
                       }
                   }
               }
           ],
           "top": {
               "key": {"type": "integer", "value": "1"}
           }
       }

FAIL valid/key/dotted-empty
     exit status 101

     input sent to parser-cmd:
       ''.x = "empty.x"
       x."" = "x.empty"
       [a]
       "".'' = "empty.empty"

     output from parser-cmd (stderr):
       thread 'main' panicked at crates/text/src/lib.rs:49:18:
       attempt to subtract with overflow
       note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

     want:
          <empty>

FAIL valid/key/empty-1
     exit status 101

     input sent to parser-cmd:
       "" = "blank"

     output from parser-cmd (stderr):
       thread 'main' panicked at crates/text/src/lib.rs:45:18:
       attempt to subtract with overflow
       note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

     want:
          <empty>

FAIL valid/key/empty-2
     exit status 101

     input sent to parser-cmd:
       '' = "blank"

     output from parser-cmd (stderr):
       thread 'main' panicked at crates/text/src/lib.rs:49:18:
       attempt to subtract with overflow
       note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

     want:
          <empty>

FAIL valid/key/empty-3
     exit status 101

     input sent to parser-cmd:
       ''=0

     output from parser-cmd (stderr):
       thread 'main' panicked at crates/text/src/lib.rs:49:18:
       attempt to subtract with overflow
       note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

     want:
          <empty>

FAIL valid/key/equals-nospace
     Malformed output from your encoder: float64 is not a string

     input sent to parser-cmd:
       answer=42

     output from parser-cmd (stdout):
       {
         "answer": {"type": "integer", "value": 42}
       }

     want:
       {
           "answer": {"type": "integer", "value": "42"}
       }

FAIL valid/key/escapes
     exit status 101

     input sent to parser-cmd:
       "\n" = "newline"
       "\b" = "bell"
       "\u00c0" = "latin capital letter A with grave"
       "\"" = "just a quote"

       ["backsp\b\b"]

       ["\"quoted\""]
       quote = true

       ["a.b"."\u00c0"]

     output from parser-cmd (stderr):
       thread 'main' panicked at crates/text/src/lib.rs:45:14:
       begin <= end (1 <= 0) when slicing `"`
       note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

     want:
          <empty>

FAIL valid/key/numeric
     Malformed output from your encoder: float64 is not a string

     input sent to parser-cmd:
       1 = 1

     output from parser-cmd (stdout):
       {
         "1": {"type": "integer", "value": 1}
       }

     want:
       {
           "1": {"type": "integer", "value": "1"}
       }

FAIL valid/key/numeric-dotted
     Could not find key "1" in parser output.

     input sent to parser-cmd:
       1.2 = 3

     output from parser-cmd (stdout):
       {}

     want:
       {
           "1": {
               "2": {"type": "integer", "value": "3"}
           }
       }

FAIL valid/key/quoted-dots
     Could not find key "with.dot" in parser output.

     input sent to parser-cmd:
       plain = 1
       "with.dot" = 2

       [plain_table]
       plain = 3
       "with.dot" = 4

       [table.withdot]
       plain = 5
       "key.with.dots" = 6

     output from parser-cmd (stdout):
       {
         "ith.do": {"type": "integer", "value": 2},
         "plain":  {"type": "integer", "value": 1},
         "plain_table": {
           "ith.do": {"type": "integer", "value": 4},
           "plain":  {"type": "integer", "value": 3}
         },
         "table": {
           "withdot": {
             "ey.with.dot": {"type": "integer", "value": 6},
             "plain":       {"type": "integer", "value": 5}
           }
         }
       }

     want:
       {
           "plain":    {"type": "integer", "value": "1"},
           "with.dot": {"type": "integer", "value": "2"},
           "plain_table": {
               "plain":    {"type": "integer", "value": "3"},
               "with.dot": {"type": "integer", "value": "4"}
           },
           "table": {
               "withdot": {
                   "key.with.dots": {"type": "integer", "value": "6"},
                   "plain":         {"type": "integer", "value": "5"}
               }
           }
       }

FAIL valid/key/quoted-unicode
     duplicate key: \u0000
     Error: invalid toml
 
     Exit 1

     input sent to parser-cmd:

       "\u0000" = "null"
       '\u0000' = "different key"
       "\u0008 \u000c \U00000041 \u007f \u0080 \u00ff \ud7ff \ue000 \uffff \U00010000 \U0010ffff" = "escaped key"

       "~ ¬Ä √ø Ìüø ÓÄÄ Ôøø êÄÄ Ùèøø" = "basic key"
       'l ~ ¬Ä √ø Ìüø ÓÄÄ Ôøø êÄÄ Ùèøø' = "literal key"

     output from parser-cmd (stderr):
       duplicate key: \u0000
       Error: invalid toml

       Exit 1

     want:
          <empty>

FAIL valid/key/space
     Could not find key " c d " in parser output.

     input sent to parser-cmd:
       # Keep whitespace inside quotes keys at all positions.
       "a b"   = 1
       " c d " = 2

       [ " tbl " ]
       "\ttab\ttab\t" = "tab"

     output from parser-cmd (stdout):
       {
         " ":   {"type": "integer", "value": 1},
         "c d": {"type": "integer", "value": 2},
         "tbl": {
           "ttab\\ttab\\": {"type": "string", "value": "tab"}
         }
       }

     want:
       {
           " c d ": {"type": "integer", "value": "2"},
           "a b":   {"type": "integer", "value": "1"},
           " tbl ": {
               "\ttab\ttab\t": {"type": "string", "value": "tab"}
           }
       }

FAIL valid/key/special-chars
     Could not find key "=~!@$^&*()_+-`1234567890[]|/?><.,;:'=" in parser output.

     input sent to parser-cmd:
       "=~!@$^&*()_+-`1234567890[]|/?><.,;:'=" = 1

     output from parser-cmd (stdout):
       {
         "~!@$^\u0026*()_+-`1234567890[]|/?\u003e\u003c.,;:'": {"type": "integer", "value": 1}
       }

     want:
       {
           "=~!@$^\u0026*()_+-`1234567890[]|/?\u003e\u003c.,;:'=": {"type": "integer", "value": "1"}
       }

FAIL valid/key/special-word
     Could not find key "inf" in parser output.

     input sent to parser-cmd:
       false = false
       true = 1
       inf = 100000000
       nan = "ceci n'est pas un nombre"

     output from parser-cmd (stdout):
       {
         "false": {"type": "bool", "value": false},
         "true":  {"type": "integer", "value": 1}
       }

     want:
       {
           "false": {"type": "bool", "value": "false"},
           "inf":   {"type": "integer", "value": "100000000"},
           "nan":   {"type": "string", "value": "ceci n'est pas un nombre"},
           "true":  {"type": "integer", "value": "1"}
       }

FAIL valid/key/start
     invalid number
     invalid number
     invalid number
     invalid number
     invalid number
     invalid number
     invalid number
     invalid number
     invalid number
     invalid number
     expected key
     expected ']'
     expected key
     expected '='
     expected value
     expected key
     expected ']'
     expected key
     expected '='
     expected value
     expected key
     expected ']'
     expected key
     expected '='
     expected value
     expected key
     expected ']'
     expected key
     expected '='
     expected value
     expected key
     expected '='
     expected value
     Error: invalid toml
 
     Exit 1

     input sent to parser-cmd:
       # Table and keys can start with any character; there is no requirement for it to
       # start with a letter.

       [-key]
       -key = 1

       [_key]
       _key = 2

       [1key]
       1key = 3

       [-]
       - = 4

       [_]
       _ = 5

       [1]
       1 = 6

       [---]
       --- = 7

       [___]
       ___ = 8

       [111]
       111 = 9

       [inline]
       --- = {--- = 10, ___ = 11, 111 = 12}

     output from parser-cmd (stderr):
       invalid number
       invalid number
       invalid number
       invalid number
       invalid number
       invalid number
       invalid number
       invalid number
       invalid number
       invalid number
       expected key
       expected ']'
       expected key
       expected '='
       expected value
       expected key
       expected ']'
       expected key
       expected '='
       expected value
       expected key
       expected ']'
       expected key
       expected '='
       expected value
       expected key
       expected ']'
       expected key
       expected '='
       expected value
       expected key
       expected '='
       expected value
       Error: invalid toml

       Exit 1

     want:
          <empty>

FAIL valid/key/zero
     Malformed output from your encoder: float64 is not a string

     input sent to parser-cmd:
       0=0

     output from parser-cmd (stdout):
       {
         "0": {"type": "integer", "value": 0}
       }

     want:
       {
           "0": {"type": "integer", "value": "0"}
       }

FAIL valid/spec-example-1
     Malformed output from your encoder: float64 is not a string

     input sent to parser-cmd:
       # This is a TOML document. Boom.

       title = "TOML Example"

       [owner]
       name = "Lance Uppercut"
       dob = 1979-05-27T07:32:00-08:00 # First class dates? Why not?

       [database]
       server = "192.168.1.1"
       ports = [ 8001, 8001, 8002 ]
       connection_max = 5000
       enabled = true

       [servers]

         # You can indent as you please. Tabs or spaces. TOML don't care.
         [servers.alpha]
         ip = "10.0.0.1"
         dc = "eqdc10"

         [servers.beta]
         ip = "10.0.0.2"
         dc = "eqdc10"

       [clients]
       data = [ ["gamma", "delta"], [1, 2] ]

       # Line breaks are OK when inside arrays
       hosts = [
         "alpha",
         "omega"
       ]

     output from parser-cmd (stdout):
       {
         "title": {"type": "string", "value": "TOML Example"},
         "clients": {
           "data": [
             [
               {"type": "string", "value": "gamma"},
               {"type": "string", "value": "delta"}
             ],
             [
               {"type": "integer", "value": 1},
               {"type": "integer", "value": 2}
             ]
           ],
           "hosts": [
             {"type": "string", "value": "alpha"},
             {"type": "string", "value": "omega"}
           ]
         },
         "database": {
           "connection_max": {"type": "integer", "value": 5000},
           "enabled":        {"type": "bool", "value": true},
           "server":         {"type": "string", "value": "192.168.1.1"},
           "ports": [
             {"type": "integer", "value": 8001},
             {"type": "integer", "value": 8001},
             {"type": "integer", "value": 8002}
           ]
         },
         "owner": {
           "dob":  {"type": "datetime", "value": "1979-05-27T07:32:00-08:00"},
           "name": {"type": "string", "value": "Lance Uppercut"}
         },
         "servers": {
           "alpha": {
             "dc": {"type": "string", "value": "eqdc10"},
             "ip": {"type": "string", "value": "10.0.0.1"}
           },
           "beta": {
             "dc": {"type": "string", "value": "eqdc10"},
             "ip": {"type": "string", "value": "10.0.0.2"}
           }
         }
       }

     want:
       {
           "title": {"type": "string", "value": "TOML Example"},
           "clients": {
               "data": [
                   [
                       {"type": "string", "value": "gamma"},
                       {"type": "string", "value": "delta"}
                   ],
                   [
                       {"type": "integer", "value": "1"},
                       {"type": "integer", "value": "2"}
                   ]
               ],
               "hosts": [
                   {"type": "string", "value": "alpha"},
                   {"type": "string", "value": "omega"}
               ]
           },
           "database": {
               "connection_max": {"type": "integer", "value": "5000"},
               "enabled":        {"type": "bool", "value": "true"},
               "server":         {"type": "string", "value": "192.168.1.1"},
               "ports": [
                   {"type": "integer", "value": "8001"},
                   {"type": "integer", "value": "8001"},
                   {"type": "integer", "value": "8002"}
               ]
           },
           "owner": {
               "dob":  {"type": "datetime", "value": "1979-05-27T07:32:00-08:00"},
               "name": {"type": "string", "value": "Lance Uppercut"}
           },
           "servers": {
               "alpha": {
                   "dc": {"type": "string", "value": "eqdc10"},
                   "ip": {"type": "string", "value": "10.0.0.1"}
               },
               "beta": {
                   "dc": {"type": "string", "value": "eqdc10"},
                   "ip": {"type": "string", "value": "10.0.0.2"}
               }
           }
       }

FAIL valid/spec-example-1-compact
     Malformed output from your encoder: float64 is not a string

     input sent to parser-cmd:
       #Useless spaces eliminated.
       title="TOML Example"
       [owner]
       name="Lance Uppercut"
       dob=1979-05-27T07:32:00-08:00#First class dates
       [database]
       server="192.168.1.1"
       ports=[8001,8001,8002]
       connection_max=5000
       enabled=true
       [servers]
       [servers.alpha]
       ip="10.0.0.1"
       dc="eqdc10"
       [servers.beta]
       ip="10.0.0.2"
       dc="eqdc10"
       [clients]
       data=[["gamma","delta"],[1,2]]
       hosts=[
       "alpha",
       "omega"
       ]

     output from parser-cmd (stdout):
       {
         "title": {"type": "string", "value": "TOML Example"},
         "clients": {
           "data": [
             [
               {"type": "string", "value": "gamma"},
               {"type": "string", "value": "delta"}
             ],
             [
               {"type": "integer", "value": 1},
               {"type": "integer", "value": 2}
             ]
           ],
           "hosts": [
             {"type": "string", "value": "alpha"},
             {"type": "string", "value": "omega"}
           ]
         },
         "database": {
           "connection_max": {"type": "integer", "value": 5000},
           "enabled":        {"type": "bool", "value": true},
           "server":         {"type": "string", "value": "192.168.1.1"},
           "ports": [
             {"type": "integer", "value": 8001},
             {"type": "integer", "value": 8001},
             {"type": "integer", "value": 8002}
           ]
         },
         "owner": {
           "dob":  {"type": "datetime", "value": "1979-05-27T07:32:00-08:00"},
           "name": {"type": "string", "value": "Lance Uppercut"}
         },
         "servers": {
           "alpha": {
             "dc": {"type": "string", "value": "eqdc10"},
             "ip": {"type": "string", "value": "10.0.0.1"}
           },
           "beta": {
             "dc": {"type": "string", "value": "eqdc10"},
             "ip": {"type": "string", "value": "10.0.0.2"}
           }
         }
       }

     want:
       {
           "title": {"type": "string", "value": "TOML Example"},
           "clients": {
               "data": [
                   [
                       {"type": "string", "value": "gamma"},
                       {"type": "string", "value": "delta"}
                   ],
                   [
                       {"type": "integer", "value": "1"},
                       {"type": "integer", "value": "2"}
                   ]
               ],
               "hosts": [
                   {"type": "string", "value": "alpha"},
                   {"type": "string", "value": "omega"}
               ]
           },
           "database": {
               "connection_max": {"type": "integer", "value": "5000"},
               "enabled":        {"type": "bool", "value": "true"},
               "server":         {"type": "string", "value": "192.168.1.1"},
               "ports": [
                   {"type": "integer", "value": "8001"},
                   {"type": "integer", "value": "8001"},
                   {"type": "integer", "value": "8002"}
               ]
           },
           "owner": {
               "dob":  {"type": "datetime", "value": "1979-05-27T07:32:00-08:00"},
               "name": {"type": "string", "value": "Lance Uppercut"}
           },
           "servers": {
               "alpha": {
                   "dc": {"type": "string", "value": "eqdc10"},
                   "ip": {"type": "string", "value": "10.0.0.1"}
               },
               "beta": {
                   "dc": {"type": "string", "value": "eqdc10"},
                   "ip": {"type": "string", "value": "10.0.0.2"}
               }
           }
       }

FAIL valid/spec/array-0
     Malformed output from your encoder: float64 is not a string

     input sent to parser-cmd:
       integers = [ 1, 2, 3 ]
       colors = [ "red", "yellow", "green" ]
       nested_arrays_of_ints = [ [ 1, 2 ], [3, 4, 5] ]
       nested_mixed_array = [ [ 1, 2 ], ["a", "b", "c"] ]
       string_array = [ "all", 'strings', """are the same""", '''type''' ]

       # Mixed-type arrays are allowed
       numbers = [ 0.1, 0.2, 0.5, 1, 2, 5 ]
       contributors = [
         "Foo Bar <foo@example.com>",
         { name = "Baz Qux", email = "bazqux@example.com", url = "https://example.com/bazqux" }
       ]

     output from parser-cmd (stdout):
       {
         "colors": [
           {"type": "string", "value": "red"},
           {"type": "string", "value": "yellow"},
           {"type": "string", "value": "green"}
         ],
         "contributors": [
           {"type": "string", "value": "Foo Bar \u003cfoo@example.com\u003e"},
           {
             "email": {"type": "string", "value": "bazqux@example.com"},
             "name":  {"type": "string", "value": "Baz Qux"},
             "url":   {"type": "string", "value": "https://example.com/bazqux"}
           }
         ],
         "integers": [
           {"type": "integer", "value": 1},
           {"type": "integer", "value": 2},
           {"type": "integer", "value": 3}
         ],
         "nested_arrays_of_ints": [
           [
             {"type": "integer", "value": 1},
             {"type": "integer", "value": 2}
           ],
           [
             {"type": "integer", "value": 3},
             {"type": "integer", "value": 4},
             {"type": "integer", "value": 5}
           ]
         ],
         "nested_mixed_array": [
           [
             {"type": "integer", "value": 1},
             {"type": "integer", "value": 2}
           ],
           [
             {"type": "string", "value": "a"},
             {"type": "string", "value": "b"},
             {"type": "string", "value": "c"}
           ]
         ],
         "numbers": [
           {"type": "float", "value": 0},
           {"type": "float", "value": 0},
           {"type": "float", "value": 0},
           {"type": "integer", "value": 1},
           {"type": "integer", "value": 2},
           {"type": "integer", "value": 5}
         ],
         "string_array": [
           {"type": "string", "value": "all"},
           {"type": "string", "value": "strings"},
           {"type": "string", "value": "are the same"},
           {"type": "string", "value": "type"}
         ]
       }

     want:
       {
           "colors": [
               {"type": "string", "value": "red"},
               {"type": "string", "value": "yellow"},
               {"type": "string", "value": "green"}
           ],
           "contributors": [
               {"type": "string", "value": "Foo Bar \u003cfoo@example.com\u003e"},
               {
                   "email": {"type": "string", "value": "bazqux@example.com"},
                   "name":  {"type": "string", "value": "Baz Qux"},
                   "url":   {"type": "string", "value": "https://example.com/bazqux"}
               }
           ],
           "integers": [
               {"type": "integer", "value": "1"},
               {"type": "integer", "value": "2"},
               {"type": "integer", "value": "3"}
           ],
           "nested_arrays_of_ints": [
               [
                   {"type": "integer", "value": "1"},
                   {"type": "integer", "value": "2"}
               ],
               [
                   {"type": "integer", "value": "3"},
                   {"type": "integer", "value": "4"},
                   {"type": "integer", "value": "5"}
               ]
           ],
           "nested_mixed_array": [
               [
                   {"type": "integer", "value": "1"},
                   {"type": "integer", "value": "2"}
               ],
               [
                   {"type": "string", "value": "a"},
                   {"type": "string", "value": "b"},
                   {"type": "string", "value": "c"}
               ]
           ],
           "numbers": [
               {"type": "float", "value": "0.1"},
               {"type": "float", "value": "0.2"},
               {"type": "float", "value": "0.5"},
               {"type": "integer", "value": "1"},
               {"type": "integer", "value": "2"},
               {"type": "integer", "value": "5"}
           ],
           "string_array": [
               {"type": "string", "value": "all"},
               {"type": "string", "value": "strings"},
               {"type": "string", "value": "are the same"},
               {"type": "string", "value": "type"}
           ]
       }

FAIL valid/spec/array-1
     Malformed output from your encoder: float64 is not a string

     input sent to parser-cmd:
       integers2 = [
         1, 2, 3
       ]

       integers3 = [
         1,
         2, # this is ok
       ]

     output from parser-cmd (stdout):
       {
         "integers2": [
           {"type": "integer", "value": 1},
           {"type": "integer", "value": 2},
           {"type": "integer", "value": 3}
         ],
         "integers3": [
           {"type": "integer", "value": 1},
           {"type": "integer", "value": 2}
         ]
       }

     want:
       {
           "integers2": [
               {"type": "integer", "value": "1"},
               {"type": "integer", "value": "2"},
               {"type": "integer", "value": "3"}
           ],
           "integers3": [
               {"type": "integer", "value": "1"},
               {"type": "integer", "value": "2"}
           ]
       }

FAIL valid/spec/array-of-tables-0
     Malformed output from your encoder: float64 is not a string

     input sent to parser-cmd:
       [[products]]
       name = "Hammer"
       sku = 738594937

       [[products]]  # empty table within the array

       [[products]]
       name = "Nail"
       sku = 284758393

       color = "gray"

     output from parser-cmd (stdout):
       {
         "products": [
           {
             "name": {"type": "string", "value": "Hammer"},
             "sku":  {"type": "integer", "value": 738594937}
           },
           {},
           {
             "color": {"type": "string", "value": "gray"},
             "name":  {"type": "string", "value": "Nail"},
             "sku":   {"type": "integer", "value": 284758393}
           }
         ]
       }

     want:
       {
           "products": [
               {
                   "name": {"type": "string", "value": "Hammer"},
                   "sku":  {"type": "integer", "value": "738594937"}
               },
               {},
               {
                   "color": {"type": "string", "value": "gray"},
                   "name":  {"type": "string", "value": "Nail"},
                   "sku":   {"type": "integer", "value": "284758393"}
               }
           ]
       }

FAIL valid/spec/array-of-tables-2
     Malformed output from your encoder: float64 is not a string

     input sent to parser-cmd:
       points = [ { x = 1, y = 2, z = 3 },
                  { x = 7, y = 8, z = 9 },
                  { x = 2, y = 4, z = 8 } ]

     output from parser-cmd (stdout):
       {
         "points": [
           {
             "x": {"type": "integer", "value": 1},
             "y": {"type": "integer", "value": 2},
             "z": {"type": "integer", "value": 3}
           },
           {
             "x": {"type": "integer", "value": 7},
             "y": {"type": "integer", "value": 8},
             "z": {"type": "integer", "value": 9}
           },
           {
             "x": {"type": "integer", "value": 2},
             "y": {"type": "integer", "value": 4},
             "z": {"type": "integer", "value": 8}
           }
         ]
       }

     want:
       {
           "points": [
               {
                   "x": {"type": "integer", "value": "1"},
                   "y": {"type": "integer", "value": "2"},
                   "z": {"type": "integer", "value": "3"}
               },
               {
                   "x": {"type": "integer", "value": "7"},
                   "y": {"type": "integer", "value": "8"},
                   "z": {"type": "integer", "value": "9"}
               },
               {
                   "x": {"type": "integer", "value": "2"},
                   "y": {"type": "integer", "value": "4"},
                   "z": {"type": "integer", "value": "8"}
               }
           ]
       }

FAIL valid/spec/boolean-0
     Malformed output from your encoder: bool is not a string

     input sent to parser-cmd:
       bool1 = true
       bool2 = false

     output from parser-cmd (stdout):
       {
         "bool1": {"type": "bool", "value": true},
         "bool2": {"type": "bool", "value": false}
       }

     want:
       {
           "bool1": {"type": "bool", "value": "true"},
           "bool2": {"type": "bool", "value": "false"}
       }

FAIL valid/spec/float-0
     Malformed output from your encoder: float64 is not a string

     input sent to parser-cmd:
       # fractional
       flt1 = +1.0
       flt2 = 3.1415
       flt3 = -0.01

       # exponent
       flt4 = 5e+22
       flt5 = 1e06
       flt6 = -2E-2

       # both
       flt7 = 6.626e-34

     output from parser-cmd (stdout):
       {
         "flt1": {"type": "float", "value": 1},
         "flt2": {"type": "float", "value": 3},
         "flt3": {"type": "float", "value": -0},
         "flt4": {"type": "float", "value": 49999999999999995805696},
         "flt5": {"type": "float", "value": 1000000},
         "flt6": {"type": "float", "value": -0},
         "flt7": {"type": "float", "value": 0}
       }

     want:
       {
           "flt1": {"type": "float", "value": "1"},
           "flt2": {"type": "float", "value": "3.1415"},
           "flt3": {"type": "float", "value": "-0.01"},
           "flt4": {"type": "float", "value": "5e+22"},
           "flt5": {"type": "float", "value": "1e+06"},
           "flt6": {"type": "float", "value": "-0.02"},
           "flt7": {"type": "float", "value": "6.626e-34"}
       }

FAIL valid/spec/float-1
     invalid float: invalid float literal
     Error: invalid toml
 
     Exit 1

     input sent to parser-cmd:
       flt8 = 224_617.445_991_228

     output from parser-cmd (stderr):
       invalid float: invalid float literal
       Error: invalid toml

       Exit 1

     want:
          <empty>

FAIL valid/spec/float-2
     Malformed output from your encoder: <nil> is not a string

     input sent to parser-cmd:
       # infinity
       sf1 = inf  # positive infinity
       sf2 = +inf # positive infinity
       sf3 = -inf # negative infinity

       # not a number
       sf4 = nan  # actual sNaN/qNaN encoding is implementation-specific
       sf5 = +nan # same as `nan`
       sf6 = -nan # valid, actual encoding is implementation-specific

     output from parser-cmd (stdout):
       {
         "sf1": {"type": "float", "value": null},
         "sf2": {"type": "float", "value": null},
         "sf3": {"type": "float", "value": null},
         "sf4": {"type": "float", "value": null},
         "sf5": {"type": "float", "value": null},
         "sf6": {"type": "float", "value": null}
       }

     want:
       {
           "sf1": {"type": "float", "value": "inf"},
           "sf2": {"type": "float", "value": "inf"},
           "sf3": {"type": "float", "value": "-inf"},
           "sf4": {"type": "float", "value": "nan"},
           "sf5": {"type": "float", "value": "nan"},
           "sf6": {"type": "float", "value": "nan"}
       }

FAIL valid/spec/inline-table-0
     Malformed output from your encoder: float64 is not a string

     input sent to parser-cmd:
       name = { first = "Tom", last = "Preston-Werner" }
       point = { x = 1, y = 2 }
       animal = { type.name = "pug" }

     output from parser-cmd (stdout):
       {
         "animal": {
           "type": {
             "name": {"type": "string", "value": "pug"}
           }
         },
         "name": {
           "first": {"type": "string", "value": "Tom"},
           "last":  {"type": "string", "value": "Preston-Werner"}
         },
         "point": {
           "x": {"type": "integer", "value": 1},
           "y": {"type": "integer", "value": 2}
         }
       }

     want:
       {
           "animal": {
               "type": {
                   "name": {"type": "string", "value": "pug"}
               }
           },
           "name": {
               "first": {"type": "string", "value": "Tom"},
               "last":  {"type": "string", "value": "Preston-Werner"}
           },
           "point": {
               "x": {"type": "integer", "value": "1"},
               "y": {"type": "integer", "value": "2"}
           }
       }

FAIL valid/spec/inline-table-1
     Malformed output from your encoder: float64 is not a string

     input sent to parser-cmd:
       [name]
       first = "Tom"
       last = "Preston-Werner"

       [point]
       x = 1
       y = 2

       [animal]
       type.name = "pug"

     output from parser-cmd (stdout):
       {
         "animal": {
           "type": {
             "name": {"type": "string", "value": "pug"}
           }
         },
         "name": {
           "first": {"type": "string", "value": "Tom"},
           "last":  {"type": "string", "value": "Preston-Werner"}
         },
         "point": {
           "x": {"type": "integer", "value": 1},
           "y": {"type": "integer", "value": 2}
         }
       }

     want:
       {
           "animal": {
               "type": {
                   "name": {"type": "string", "value": "pug"}
               }
           },
           "name": {
               "first": {"type": "string", "value": "Tom"},
               "last":  {"type": "string", "value": "Preston-Werner"}
           },
           "point": {
               "x": {"type": "integer", "value": "1"},
               "y": {"type": "integer", "value": "2"}
           }
       }

FAIL valid/spec/integer-0
     Malformed output from your encoder: float64 is not a string

     input sent to parser-cmd:
       int1 = +99
       int2 = 42
       int3 = 0
       int4 = -17

     output from parser-cmd (stdout):
       {
         "int1": {"type": "integer", "value": 99},
         "int2": {"type": "integer", "value": 42},
         "int3": {"type": "integer", "value": 0},
         "int4": {"type": "integer", "value": -17}
       }

     want:
       {
           "int1": {"type": "integer", "value": "99"},
           "int2": {"type": "integer", "value": "42"},
           "int3": {"type": "integer", "value": "0"},
           "int4": {"type": "integer", "value": "-17"}
       }

FAIL valid/spec/integer-1
     invalid integer: invalid digit found in string
     invalid integer: invalid digit found in string
     invalid integer: invalid digit found in string
     invalid integer: invalid digit found in string
     Error: invalid toml
 
     Exit 1

     input sent to parser-cmd:
       int5 = 1_000
       int6 = 5_349_221
       int7 = 53_49_221  # Indian number system grouping
       int8 = 1_2_3_4_5  # VALID but discouraged

     output from parser-cmd (stderr):
       invalid integer: invalid digit found in string
       invalid integer: invalid digit found in string
       invalid integer: invalid digit found in string
       invalid integer: invalid digit found in string
       Error: invalid toml

       Exit 1

     want:
          <empty>

FAIL valid/spec/integer-2
     invalid integer: invalid digit found in string
     Error: invalid toml
 
     Exit 1

     input sent to parser-cmd:
       # hexadecimal with prefix `0x`
       hex1 = 0xDEADBEEF
       hex2 = 0xdeadbeef
       hex3 = 0xdead_beef

       # octal with prefix `0o`
       oct1 = 0o01234567
       oct2 = 0o755 # useful for Unix file permissions

       # binary with prefix `0b`
       bin1 = 0b11010110

     output from parser-cmd (stderr):
       invalid integer: invalid digit found in string
       Error: invalid toml

       Exit 1

     want:
          <empty>

FAIL valid/spec/keys-1
     exit status 101

     input sent to parser-cmd:
       "127.0.0.1" = "value"
       "character encoding" = "value"
       " é«ù û" = "value"
       'key2' = "value"
       'quoted "value"' = "value"

     output from parser-cmd (stderr):
       thread 'main' panicked at crates/text/src/lib.rs:45:14:
       byte index 1 is not a char boundary; it is inside ' é' (bytes 0..2) of ` é«ù û`
       note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

     want:
          <empty>

FAIL valid/spec/keys-3
     Could not find key "site.google.com" in parser output.

     input sent to parser-cmd:
       name = "Orange"
       physical.color = "orange"
       physical.shape = "round"
       site."google.com" = true

     output from parser-cmd (stdout):
       {
         "name": {"type": "string", "value": "Orange"},
         "physical": {
           "color": {"type": "string", "value": "orange"},
           "shape": {"type": "string", "value": "round"}
         },
         "site": {
           "oogle.co": {"type": "bool", "value": true}
         }
       }

     want:
       {
           "name": {"type": "string", "value": "Orange"},
           "physical": {
               "color": {"type": "string", "value": "orange"},
               "shape": {"type": "string", "value": "round"}
           },
           "site": {
               "google.com": {"type": "bool", "value": "true"}
           }
       }

FAIL valid/spec/keys-7
     Could not find key "3" in parser output.

     input sent to parser-cmd:
       3.14159 = "pi"

     output from parser-cmd (stdout):
       {}

     want:
       {
           "3": {
               "14159": {"type": "string", "value": "pi"}
           }
       }

FAIL valid/spec/string-0
     Values for key "str" don't match:
       Expected:     I'm a string. "You can quote me". Name	Jos√©
     Location	SF.
       Your encoder: I'm a string. "You can quote me". Name\tJos\u00E9\nLocation\tSF.

     input sent to parser-cmd:
       str = "I'm a string. \"You can quote me\". Name\tJos\u00E9\nLocation\tSF."

     output from parser-cmd (stdout):
       {
         "str": {
           "type":  "string",
           "value": "I'm a string. \"You can quote me\". Name\\tJos\\u00E9\\nLocation\\tSF."
         }
       }

     want:
       {
           "str": {"type": "string", "value": "I'm a string. \"You can quote me\". Name\tJos√©\nLocation\tSF."}
       }

FAIL valid/spec/string-1
     Values for key "str1" don't match:
       Expected:     Roses are red
     Violets are blue
       Your encoder:
     Roses are red
     Violets are blue

     input sent to parser-cmd:
       str1 = """
       Roses are red
       Violets are blue"""

     output from parser-cmd (stdout):
       {
         "str1": {"type": "string", "value": "\nRoses are red\nViolets are blue"}
       }

     want:
       {
           "str1": {"type": "string", "value": "Roses are red\nViolets are blue"}
       }

FAIL valid/spec/string-2
     Values for key "str2" don't match:
       Expected:     Roses are red
     Violets are blue
       Your encoder: Roses are red\nViolets are blue

     input sent to parser-cmd:
       # On a Unix system, the above multi-line string will most likely be the same as:
       str2 = "Roses are red\nViolets are blue"

       # On a Windows system, it will most likely be equivalent to:
       str3 = "Roses are red\r\nViolets are blue"

     output from parser-cmd (stdout):
       {
         "str2": {"type": "string", "value": "Roses are red\\nViolets are blue"},
         "str3": {"type": "string", "value": "Roses are red\\r\\nViolets are blue"}
       }

     want:
       {
           "str2": {"type": "string", "value": "Roses are red\nViolets are blue"},
           "str3": {"type": "string", "value": "Roses are red\r\nViolets are blue"}
       }

FAIL valid/spec/string-3
     Values for key "str2" don't match:
       Expected:     The quick brown fox jumps over the lazy dog.
       Your encoder:
     The quick brown \
 
 
       fox jumps over \
         the lazy dog.

     input sent to parser-cmd:
       # The following strings are byte-for-byte equivalent:
       str1 = "The quick brown fox jumps over the lazy dog."

       str2 = """
       The quick brown \


         fox jumps over \
           the lazy dog."""

       str3 = """\
              The quick brown \
              fox jumps over \
              the lazy dog.\
              """

     output from parser-cmd (stdout):
       {
         "str1": {"type": "string", "value": "The quick brown fox jumps over the lazy dog."},
         "str2": {"type": "string", "value": "\nThe quick brown \\\n\n\n  fox jumps over \\\n    the lazy dog."},
         "str3": {
           "type":  "string",
           "value": "\\\n       The quick brown \\\n       fox jumps over \\\n       the lazy dog.\\\n       "
         }
       }

     want:
       {
           "str1": {"type": "string", "value": "The quick brown fox jumps over the lazy dog."},
           "str2": {"type": "string", "value": "The quick brown fox jumps over the lazy dog."},
           "str3": {"type": "string", "value": "The quick brown fox jumps over the lazy dog."}
       }

FAIL valid/spec/string-4
     invalid token
     invalid multi-line basic strings
     unknown line
     Error: invalid toml
 
     Exit 1

     input sent to parser-cmd:
       str4 = """Here are two quotation marks: "". Simple enough."""
       # str5 = """Here are three quotation marks: """."""  # INVALID
       str5 = """Here are three quotation marks: ""\"."""
       str6 = """Here are fifteen quotation marks: ""\"""\"""\"""\"""\"."""

       # "This," she said, "is just a pointless statement."
       str7 = """"This," she said, "is just a pointless statement.""""

     output from parser-cmd (stderr):
       invalid token
       invalid multi-line basic strings
       unknown line
       Error: invalid toml

       Exit 1

     want:
          <empty>

FAIL valid/spec/string-5
     invalid key
     expected '='
     unknown line
     Error: invalid toml
 
     Exit 1

     input sent to parser-cmd:
       # What you see is what you get.
       winpath  = 'C:\Users\nodejs\templates'
       winpath2 = '\\ServerX\admin$\system32\'
       quoted   = 'Tom "Dubs" Preston-Werner'
       regex    = '<\i\c*\s*>'

     output from parser-cmd (stderr):
       invalid key
       expected '='
       unknown line
       Error: invalid toml

       Exit 1

     want:
          <empty>

FAIL valid/spec/string-6
     Values for key "lines" don't match:
       Expected:     The first newline is
     trimmed in raw strings.
        All other whitespace
        is preserved.
 
       Your encoder:
     The first newline is
     trimmed in raw strings.
        All other whitespace
        is preserved.

     input sent to parser-cmd:
       regex2 = '''I [dw]on't need \d{2} apples'''
       lines  = '''
       The first newline is
       trimmed in raw strings.
          All other whitespace
          is preserved.
       '''

     output from parser-cmd (stdout):
       {
         "regex2": {"type": "string", "value": "I [dw]on't need \\d{2} apples"},
         "lines": {
           "type":  "string",
           "value": "\nThe first newline is\ntrimmed in raw strings.\n   All other whitespace\n   is preserved.\n"
         }
       }

     want:
       {
           "lines":  {"type": "string", "value": "The first newline is\ntrimmed in raw strings.\n   All other whitespace\n   is preserved.\n"},
           "regex2": {"type": "string", "value": "I [dw]on't need \\d{2} apples"}
       }

FAIL valid/spec/string-7
     expected '='
     expected value
     Error: invalid toml
 
     Exit 1

     input sent to parser-cmd:
       quot15 = '''Here are fifteen quotation marks: """""""""""""""'''

       # apos15 = '''Here are fifteen apostrophes: ''''''''''''''''''  # INVALID
       apos15 = "Here are fifteen apostrophes: '''''''''''''''"

       # 'That,' she said, 'is still pointless.'
       str = ''''That,' she said, 'is still pointless.''''

     output from parser-cmd (stderr):
       expected '='
       expected value
       Error: invalid toml

       Exit 1

     want:
          <empty>

FAIL valid/spec/table-1
     Malformed output from your encoder: float64 is not a string

     input sent to parser-cmd:
       [table-1]
       key1 = "some string"
       key2 = 123

       [table-2]
       key1 = "another string"
       key2 = 456

     output from parser-cmd (stdout):
       {
         "table-1": {
           "key1": {"type": "string", "value": "some string"},
           "key2": {"type": "integer", "value": 123}
         },
         "table-2": {
           "key1": {"type": "string", "value": "another string"},
           "key2": {"type": "integer", "value": 456}
         }
       }

     want:
       {
           "table-1": {
               "key1": {"type": "string", "value": "some string"},
               "key2": {"type": "integer", "value": "123"}
           },
           "table-2": {
               "key1": {"type": "string", "value": "another string"},
               "key2": {"type": "integer", "value": "456"}
           }
       }

FAIL valid/spec/table-2
     Could not find key "dog.tater.man" in parser output.

     input sent to parser-cmd:
       [dog."tater.man"]
       type.name = "pug"

     output from parser-cmd (stdout):
       {
         "dog": {
           "ater.ma": {
             "type": {
               "name": {"type": "string", "value": "pug"}
             }
           }
         }
       }

     want:
       {
           "dog": {
               "tater.man": {
                   "type": {
                       "name": {"type": "string", "value": "pug"}
                   }
               }
           }
       }

FAIL valid/spec/table-3
     exit status 101

     input sent to parser-cmd:
       [a.b.c]            # this is best practice
       [ d.e.f ]          # same as [d.e.f]
       [ g .  h  . i ]    # same as [g.h.i]
       [ j . " û" . 'l' ]  # same as [j." û".'l']

     output from parser-cmd (stderr):
       thread 'main' panicked at crates/text/src/lib.rs:45:14:
       byte index 1 is not a char boundary; it is inside ' û' (bytes 0..2) of ` û`
       note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

     want:
          <empty>

FAIL valid/spec/table-8
     Malformed output from your encoder: bool is not a string

     input sent to parser-cmd:
       fruit.apple.color = "red"
       # Defines a table named fruit
       # Defines a table named fruit.apple

       fruit.apple.taste.sweet = true
       # Defines a table named fruit.apple.taste
       # fruit and fruit.apple were already created

     output from parser-cmd (stdout):
       {
         "fruit": {
           "apple": {
             "color": {"type": "string", "value": "red"},
             "taste": {
               "sweet": {"type": "bool", "value": true}
             }
           }
         }
       }

     want:
       {
           "fruit": {
               "apple": {
                   "color": {"type": "string", "value": "red"},
                   "taste": {
                       "sweet": {"type": "bool", "value": "true"}
                   }
               }
           }
       }

FAIL valid/spec/table-9
     Malformed output from your encoder: bool is not a string

     input sent to parser-cmd:
       [fruit]
       apple.color = "red"
       apple.taste.sweet = true

       # [fruit.apple]  # INVALID
       # [fruit.apple.taste]  # INVALID

       [fruit.apple.texture]  # you can add sub-tables
       smooth = true

     output from parser-cmd (stdout):
       {
         "fruit": {
           "apple": {
             "color": {"type": "string", "value": "red"},
             "taste": {
               "sweet": {"type": "bool", "value": true}
             },
             "texture": {
               "smooth": {"type": "bool", "value": true}
             }
           }
         }
       }

     want:
       {
           "fruit": {
               "apple": {
                   "color": {"type": "string", "value": "red"},
                   "taste": {
                       "sweet": {"type": "bool", "value": "true"}
                   },
                   "texture": {
                       "smooth": {"type": "bool", "value": "true"}
                   }
               }
           }
       }

FAIL valid/string/ends-in-whitespace-escape
     Values for key "beee" don't match:
       Expected:     heeee
     geeee
       Your encoder:
     heeee
     geeee\

     input sent to parser-cmd:
       beee = """
       heeee
       geeee\


             """

     output from parser-cmd (stdout):
       {
         "beee": {"type": "string", "value": "\nheeee\ngeeee\\  \n\n\n      "}
       }

     want:
       {
           "beee": {"type": "string", "value": "heeee\ngeeee"}
       }

FAIL valid/string/escape-tricky
     invalid basic string
     invalid token
     invalid key
     expected value
     unknown line
     Error: invalid toml
 
     Exit 1

     input sent to parser-cmd:
       end_esc = "String does not end here\" but ends here\\"
       lit_end_esc = 'String ends here\'

       multiline_unicode = """
       \u00a0"""

       multiline_not_unicode = """
       \\u0041"""

       multiline_end_esc = """When will it end? \"""...""\" should be here\""""

       lit_multiline_not_unicode = '''
       \u007f'''

       lit_multiline_end = '''There is no escape\'''

     output from parser-cmd (stderr):
       invalid basic string
       invalid token
       invalid key
       expected value
       unknown line
       Error: invalid toml

       Exit 1

     want:
          <empty>

FAIL valid/string/escaped-escape
     Values for key "answer" don't match:
       Expected:     \x64
       Your encoder: \\x64

     input sent to parser-cmd:
       answer = "\\x64"

     output from parser-cmd (stdout):
       {
         "answer": {"type": "string", "value": "\\\\x64"}
       }

     want:
       {
           "answer": {"type": "string", "value": "\\x64"}
       }

FAIL valid/string/escapes
     Values for key "backslash" don't match:
       Expected:     |\.
       Your encoder: |\\.

     input sent to parser-cmd:
       backspace     = "|\b."
       tab           = "|\t."
       newline       = "|\n."
       formfeed      = "|\f."
       carriage      = "|\r."
       quote         = "|\"."
       backslash     = "|\\."
       delete        = "|\u007F."
       unitseparator = "|\u001F."

       # \u is escaped, so should NOT be interperted as a \u escape.
       notunicode1   = "|\\u."
       notunicode2   = "|\u005Cu."
       notunicode3   = "|\\u0075."
       notunicode4   = "|\\\u0075."

     output from parser-cmd (stdout):
       {
         "backslash":     {"type": "string", "value": "|\\\\."},
         "backspace":     {"type": "string", "value": "|\\b."},
         "carriage":      {"type": "string", "value": "|\\r."},
         "delete":        {"type": "string", "value": "|\\u007F."},
         "formfeed":      {"type": "string", "value": "|\\f."},
         "newline":       {"type": "string", "value": "|\\n."},
         "notunicode1":   {"type": "string", "value": "|\\\\u."},
         "notunicode2":   {"type": "string", "value": "|\\u005Cu."},
         "notunicode3":   {"type": "string", "value": "|\\\\u0075."},
         "notunicode4":   {"type": "string", "value": "|\\\\\\u0075."},
         "quote":         {"type": "string", "value": "|\"."},
         "tab":           {"type": "string", "value": "|\\t."},
         "unitseparator": {"type": "string", "value": "|\\u001F."}
       }

     want:
       {
           "backslash":     {"type": "string", "value": "|\\."},
           "backspace":     {"type": "string", "value": "|\b."},
           "carriage":      {"type": "string", "value": "|\r."},
           "delete":        {"type": "string", "value": "|."},
           "formfeed":      {"type": "string", "value": "|\f."},
           "newline":       {"type": "string", "value": "|\n."},
           "notunicode1":   {"type": "string", "value": "|\\u."},
           "notunicode2":   {"type": "string", "value": "|\\u."},
           "notunicode3":   {"type": "string", "value": "|\\u0075."},
           "notunicode4":   {"type": "string", "value": "|\\u."},
           "quote":         {"type": "string", "value": "|\"."},
           "tab":           {"type": "string", "value": "|\t."},
           "unitseparator": {"type": "string", "value": "|\u001f."}
       }

FAIL valid/string/multiline
     Values for key "equivalent_three" don't match:
       Expected:     The quick brown fox jumps over the lazy dog.
       Your encoder: \
            The quick brown \
            fox jumps over \
            the lazy dog.\

     input sent to parser-cmd:
       # NOTE: this file includes some literal tab characters.

       equivalent_one = "The quick brown fox jumps over the lazy dog."
       equivalent_two = """
       The quick brown \


         fox jumps over \
           the lazy dog."""

       equivalent_three = """\
              The quick brown \
              fox jumps over \
              the lazy dog.\
              """

       whitespace-after-bs = """\
              The quick brown \
              fox jumps over \
              the lazy dog.\
              """

       no-space = """a\
           b"""

       # Has tab character.
       keep-ws-before = """a   	\
          b"""

       escape-bs-1 = """a \\
       b"""

       escape-bs-2 = """a \\\
       b"""

       escape-bs-3 = """a \\\\
         b"""

     output from parser-cmd (stdout):
       {
         "equivalent_one": {"type": "string", "value": "The quick brown fox jumps over the lazy dog."},
         "equivalent_two": {"type": "string", "value": "\nThe quick brown \\\n\n\n  fox jumps over \\\n    the lazy dog."},
         "escape-bs-1":    {"type": "string", "value": "a \\\\\nb"},
         "escape-bs-2":    {"type": "string", "value": "a \\\\\\\nb"},
         "escape-bs-3":    {"type": "string", "value": "a \\\\\\\\\n  b"},
         "keep-ws-before": {"type": "string", "value": "a   \t\\\n   b"},
         "no-space":       {"type": "string", "value": "a\\\n    b"},
         "equivalent_three": {
           "type":  "string",
           "value": "\\\n       The quick brown \\\n       fox jumps over \\\n       the lazy dog.\\\n       "
         },
         "whitespace-after-bs": {
           "type":  "string",
           "value": "\\\n       The quick brown \\\n       fox jumps over \\   \n       the lazy dog.\\\t\n       "
         }
       }

     want:
       {
           "equivalent_one":      {"type": "string", "value": "The quick brown fox jumps over the lazy dog."},
           "equivalent_three":    {"type": "string", "value": "The quick brown fox jumps over the lazy dog."},
           "equivalent_two":      {"type": "string", "value": "The quick brown fox jumps over the lazy dog."},
           "escape-bs-1":         {"type": "string", "value": "a \\\nb"},
           "escape-bs-2":         {"type": "string", "value": "a \\b"},
           "escape-bs-3":         {"type": "string", "value": "a \\\\\n  b"},
           "keep-ws-before":      {"type": "string", "value": "a   \tb"},
           "no-space":            {"type": "string", "value": "ab"},
           "whitespace-after-bs": {"type": "string", "value": "The quick brown fox jumps over the lazy dog."}
       }

FAIL valid/string/multiline-empty
     expected '='
     expected value
     Error: invalid toml
 
     Exit 1

     input sent to parser-cmd:
       empty-1 = """"""

       # A newline immediately following the opening delimiter will be trimmed.
       empty-2 = """
       """

       # \ at the end of line trims newlines as well; note that last \ is followed by
       # two spaces, which are ignored.
       empty-3 = """\
           """
       empty-4 = """\
          \
          \
          """

     output from parser-cmd (stderr):
       expected '='
       expected value
       Error: invalid toml

       Exit 1

     want:
          <empty>

FAIL valid/string/multiline-escaped-crlf
     Values for key "0" don't match:
       Expected:
       Your encoder: \

     input sent to parser-cmd:
       # The following line should be an unescaped backslash followed by a Windows
       # newline sequence ("\r\n")
       0="""\
       """

     output from parser-cmd (stdout):
       {
         "0": {"type": "string", "value": "\\\r\n"}
       }

     want:
       {
           "0": {"type": "string", "value": ""}
       }

FAIL valid/string/multiline-quotes
     invalid key
     invalid key
     expected '='
     expected value
     expected '='
     expected '='
     expected value
     expected '='
     unknown line
     expected '='
     expected value
     unknown line
     expected '='
     expected value
     unknown line
     Error: invalid toml
 
     Exit 1

     input sent to parser-cmd:
       # Make sure that quotes inside multiline strings are allowed, including right
       # after the opening '''/""" and before the closing '''/"""

       lit_one = ''''one quote''''
       lit_two = '''''two quotes'''''
       lit_one_space = ''' 'one quote' '''
       lit_two_space = ''' ''two quotes'' '''

       one = """"one quote""""
       two = """""two quotes"""""
       one_space = """ "one quote" """
       two_space = """ ""two quotes"" """

       mismatch1 = """aaa'''bbb"""
       mismatch2 = '''aaa"""bbb'''

       # Three opening """, then one escaped ", then two "" (allowed), and then three
       # closing """
       escaped = """lol\""""""

       five-quotes = """
       Closing with five quotes
       """""
       four-quotes = """
       Closing with four quotes
       """"

     output from parser-cmd (stderr):
       invalid key
       invalid key
       expected '='
       expected value
       expected '='
       expected '='
       expected value
       expected '='
       unknown line
       expected '='
       expected value
       unknown line
       expected '='
       expected value
       unknown line
       Error: invalid toml

       Exit 1

     want:
          <empty>

FAIL valid/string/nl
     Values for key "nl_end" don't match:
       Expected:     value
 
       Your encoder: value\n

     input sent to parser-cmd:
       nl_mid = "val\nue"
       nl_end = """value\n"""

       lit_nl_end = '''value\n'''
       lit_nl_mid = 'val\nue'
       lit_nl_uni = 'val\ue'

     output from parser-cmd (stdout):
       {
         "lit_nl_end": {"type": "string", "value": "value\\n"},
         "lit_nl_mid": {"type": "string", "value": "val\\nue"},
         "lit_nl_uni": {"type": "string", "value": "val\\ue"},
         "nl_end":     {"type": "string", "value": "value\\n"},
         "nl_mid":     {"type": "string", "value": "val\\nue"}
       }

     want:
       {
           "lit_nl_end": {"type": "string", "value": "value\\n"},
           "lit_nl_mid": {"type": "string", "value": "val\\nue"},
           "lit_nl_uni": {"type": "string", "value": "val\\ue"},
           "nl_end":     {"type": "string", "value": "value\n"},
           "nl_mid":     {"type": "string", "value": "val\nue"}
       }

FAIL valid/string/quoted-unicode
     Values for key "escaped_string" don't match:
       Expected:         A  ¬Ä √ø Ìüø ÓÄÄ Ôøø êÄÄ Ùèøø
       Your encoder: \u0000 \u0008 \u000c \U00000041 \u007f \u0080 \u00ff \ud7ff \ue000 \uffff \U00010000 \U0010ffff

     input sent to parser-cmd:

       escaped_string = "\u0000 \u0008 \u000c \U00000041 \u007f \u0080 \u00ff \ud7ff \ue000 \uffff \U00010000 \U0010ffff"
       not_escaped_string = '\u0000 \u0008 \u000c \U00000041 \u007f \u0080 \u00ff \ud7ff \ue000 \uffff \U00010000 \U0010ffff'

       basic_string = "~ ¬Ä √ø Ìüø ÓÄÄ Ôøø êÄÄ Ùèøø"
       literal_string = '~ ¬Ä √ø Ìüø ÓÄÄ Ôøø êÄÄ Ùèøø'

     output from parser-cmd (stdout):
       {
         "basic_string":   {"type": "string", "value": "~ ¬Ä √ø Ìüø ÓÄÄ Ôøø êÄÄ Ùèøø"},
         "literal_string": {"type": "string", "value": "~ ¬Ä √ø Ìüø ÓÄÄ Ôøø êÄÄ Ùèøø"},
         "escaped_string": {
           "type":  "string",
           "value": "\\u0000 \\u0008 \\u000c \\U00000041 \\u007f \\u0080 \\u00ff \\ud7ff \\ue000 \\uffff \\U00010000 \\U0010ffff"
         },
         "not_escaped_string": {
           "type":  "string",
           "value": "\\u0000 \\u0008 \\u000c \\U00000041 \\u007f \\u0080 \\u00ff \\ud7ff \\ue000 \\uffff \\U00010000 \\U0010ffff"
         }
       }

     want:
       {
           "basic_string":   {"type": "string", "value": "~ ¬Ä √ø Ìüø ÓÄÄ Ôøø êÄÄ Ùèøø"},
           "escaped_string": {"type": "string", "value": "\u0000 \b \f A  ¬Ä √ø Ìüø ÓÄÄ Ôøø êÄÄ Ùèøø"},
           "literal_string": {"type": "string", "value": "~ ¬Ä √ø Ìüø ÓÄÄ Ôøø êÄÄ Ùèøø"},
           "not_escaped_string": {
               "type":  "string",
               "value": "\\u0000 \\u0008 \\u000c \\U00000041 \\u007f \\u0080 \\u00ff \\ud7ff \\ue000 \\uffff \\U00010000 \\U0010ffff"
           }
       }

FAIL valid/string/raw-multiline
     invalid key
     invalid literal string
     unknown line
     expected '='
     expected value
     unknown line
     Error: invalid toml
 
     Exit 1

     input sent to parser-cmd:
       # Single ' should be allowed.
       oneline = '''This string has a ' quote character.'''

       # A newline immediately following the opening delimiter will be trimmed.
       firstnl = '''
       This string has a ' quote character.'''

       # All other whitespace and newline characters remain intact.
       multiline = '''
       This string
       has ' a quote character
       and more than
       one newline
       in it.'''

       # Tab character in literal string does not need to be escaped
       multiline_with_tab = '''First line
       	 Followed by a tab'''

       this-str-has-apostrophes='''' there's one already
       '' two more
       '''''

     output from parser-cmd (stderr):
       invalid key
       invalid literal string
       unknown line
       expected '='
       expected value
       unknown line
       Error: invalid toml

       Exit 1

     want:
          <empty>

FAIL valid/string/start-mb
     Values for key "s3" don't match:
       Expected:     ¬ß
       Your encoder: \
     ¬ß

     input sent to parser-cmd:
       # Start first line with a multibyte character.
       #
       # https://github.com/marzer/tomlplusplus/issues/190
       s1 = "¬ß"
       s2 = '¬ß'
       s3 = """\
       ¬ß"""
       s4 = """
       ¬ß"""
       s5 = """¬ß"""
       s6 = '''
       ¬ß'''
       s7 = '''¬ß'''

     output from parser-cmd (stdout):
       {
         "s1": {"type": "string", "value": "¬ß"},
         "s2": {"type": "string", "value": "¬ß"},
         "s3": {"type": "string", "value": "\\\n¬ß"},
         "s4": {"type": "string", "value": "\n¬ß"},
         "s5": {"type": "string", "value": "¬ß"},
         "s6": {"type": "string", "value": "\n¬ß"},
         "s7": {"type": "string", "value": "¬ß"}
       }

     want:
       {
           "s1": {"type": "string", "value": "¬ß"},
           "s2": {"type": "string", "value": "¬ß"},
           "s3": {"type": "string", "value": "¬ß"},
           "s4": {"type": "string", "value": "¬ß"},
           "s5": {"type": "string", "value": "¬ß"},
           "s6": {"type": "string", "value": "¬ß"},
           "s7": {"type": "string", "value": "¬ß"}
       }

FAIL valid/string/unicode-escape
     Values for key "a" don't match:
       Expected:     a
       Your encoder: \u0061

     input sent to parser-cmd:
       delta-1 = "\u03B4"
       delta-2 = "\U000003B4"
       a       = "\u0061"
       b       = "\u0062"
       c       = "\U00000063"
       null-1  = "\u0000"
       null-2  = "\U00000000"

       ml-delta-1 = """\u03B4"""
       ml-delta-2 = """\U000003B4"""
       ml-a       = """\u0061"""
       ml-b       = """\u0062"""
       ml-c       = """\U00000063"""
       ml-null-1  = """\u0000"""
       ml-null-2  = """\U00000000"""

     output from parser-cmd (stdout):
       {
         "a":          {"type": "string", "value": "\\u0061"},
         "b":          {"type": "string", "value": "\\u0062"},
         "c":          {"type": "string", "value": "\\U00000063"},
         "delta-1":    {"type": "string", "value": "\\u03B4"},
         "delta-2":    {"type": "string", "value": "\\U000003B4"},
         "ml-a":       {"type": "string", "value": "\\u0061"},
         "ml-b":       {"type": "string", "value": "\\u0062"},
         "ml-c":       {"type": "string", "value": "\\U00000063"},
         "ml-delta-1": {"type": "string", "value": "\\u03B4"},
         "ml-delta-2": {"type": "string", "value": "\\U000003B4"},
         "ml-null-1":  {"type": "string", "value": "\\u0000"},
         "ml-null-2":  {"type": "string", "value": "\\U00000000"},
         "null-1":     {"type": "string", "value": "\\u0000"},
         "null-2":     {"type": "string", "value": "\\U00000000"}
       }

     want:
       {
           "a":          {"type": "string", "value": "a"},
           "b":          {"type": "string", "value": "b"},
           "c":          {"type": "string", "value": "c"},
           "delta-1":    {"type": "string", "value": "Œ¥"},
           "delta-2":    {"type": "string", "value": "Œ¥"},
           "ml-a":       {"type": "string", "value": "a"},
           "ml-b":       {"type": "string", "value": "b"},
           "ml-c":       {"type": "string", "value": "c"},
           "ml-delta-1": {"type": "string", "value": "Œ¥"},
           "ml-delta-2": {"type": "string", "value": "Œ¥"},
           "ml-null-1":  {"type": "string", "value": "\u0000"},
           "ml-null-2":  {"type": "string", "value": "\u0000"},
           "null-1":     {"type": "string", "value": "\u0000"},
           "null-2":     {"type": "string", "value": "\u0000"}
       }

FAIL valid/table/array-implicit-and-explicit-after
     Malformed output from your encoder: float64 is not a string

     input sent to parser-cmd:
       [[a.b]]
       x = 1

       [a]
       y = 2

     output from parser-cmd (stdout):
       {
         "a": {
           "b": [{
             "x": {"type": "integer", "value": 1}
           }],
           "y": {"type": "integer", "value": 2}
         }
       }

     want:
       {
           "a": {
               "b": [{
                   "x": {"type": "integer", "value": "1"}
               }],
               "y": {"type": "integer", "value": "2"}
           }
       }

FAIL valid/table/array-within-dotted
     Malformed output from your encoder: float64 is not a string

     input sent to parser-cmd:
       [fruit]
       apple.color = "red"

       [[fruit.apple.seeds]]
       size = 2

     output from parser-cmd (stdout):
       {
         "fruit": {
           "apple": {
             "color": {"type": "string", "value": "red"},
             "seeds": [{
               "size": {"type": "integer", "value": 2}
             }]
           }
         }
       }

     want:
       {
           "fruit": {
               "apple": {
                   "color": {"type": "string", "value": "red"},
                   "seeds": [{
                       "size": {"type": "integer", "value": "2"}
                   }]
               }
           }
       }

FAIL valid/table/empty-name
     exit status 101

     input sent to parser-cmd:
       ['']
       x = 1

       ["".a]
       x = 2

       [a.'']
       x = 3

     output from parser-cmd (stderr):
       thread 'main' panicked at crates/text/src/lib.rs:49:18:
       attempt to subtract with overflow
       note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

     want:
          <empty>

FAIL valid/table/keyword
     Could not find key "inf" in parser output.

     input sent to parser-cmd:
       [true]

       [false]

       [inf]

       [nan]

     output from parser-cmd (stdout):
       {
         "false": {},
         "true":  {}
       }

     want:
       {
           "false": {},
           "inf":   {},
           "nan":   {},
           "true":  {}
       }

FAIL valid/table/names
     exit status 101

     input sent to parser-cmd:
       [a.b.c]
       [a."b.c"]
       [a.'d.e']
       [a.' x ']
       [ d.e.f ]
       [ g . h . i ]
       [ j . " û" . 'l' ]

       [x.1.2]

     output from parser-cmd (stderr):
       thread 'main' panicked at crates/text/src/lib.rs:45:14:
       byte index 1 is not a char boundary; it is inside ' û' (bytes 0..2) of ` û`
       note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

     want:
          <empty>

FAIL valid/table/sub
     Malformed output from your encoder: float64 is not a string

     input sent to parser-cmd:
       [a]
       key = 1

       # a.extend is a key inside the "a" table.
       [a.extend]
       key = 2

       [a.extend.more]
       key = 3

     output from parser-cmd (stdout):
       {
         "a": {
           "key": {"type": "integer", "value": 1},
           "extend": {
             "key": {"type": "integer", "value": 2},
             "more": {
               "key": {"type": "integer", "value": 3}
             }
           }
         }
       }

     want:
       {
           "a": {
               "key": {"type": "integer", "value": "1"},
               "extend": {
                   "key": {"type": "integer", "value": "2"},
                   "more": {
                       "key": {"type": "integer", "value": "3"}
                   }
               }
           }
       }

FAIL valid/table/whitespace
     Could not find key "valid key" in parser output.

     input sent to parser-cmd:
       ["valid key"]

     output from parser-cmd (stdout):
       {
         "alid ke": {}
       }

     want:
       {
           "valid key": {}
       }

FAIL valid/table/with-literal-string
     exit status 101

     input sent to parser-cmd:
       ['a']
       [a.'"b"']
       [a.'"b"'.c]
       answer = 42

     output from parser-cmd (stderr):
       thread 'main' panicked at crates/text/src/lib.rs:49:14:
       begin <= end (1 <= 0) when slicing `a`
       note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

     want:
          <empty>

FAIL valid/table/with-pound
     Could not find key "key#group" in parser output.

     input sent to parser-cmd:
       ["key#group"]
       answer = 42

     output from parser-cmd (stdout):
       {
         "ey#grou": {
           "answer": {"type": "integer", "value": 42}
         }
       }

     want:
       {
           "key#group": {
               "answer": {"type": "integer", "value": "42"}
           }
       }

FAIL valid/table/with-single-quotes
     exit status 101

     input sent to parser-cmd:
       ['a']
       [a.'b']
       [a.'b'.c]
       answer = 42

     output from parser-cmd (stderr):
       thread 'main' panicked at crates/text/src/lib.rs:49:14:
       begin <= end (1 <= 0) when slicing `a`
       note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

     want:
          <empty>

FAIL invalid/control/bare-cr
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       # The following line contains a single carriage return control character
       

     output from parser-cmd (stdout):
       {}

     want:
       Exit code 1

FAIL invalid/control/comment-cr
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       comment-cr   = "Carriage return in comment" # a=1

     output from parser-cmd (stdout):
       {
         "a":          {"type": "integer", "value": 1},
         "comment-cr": {"type": "string", "value": "Carriage return in comment"}
       }

     want:
       Exit code 1

FAIL invalid/control/comment-del
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       comment-del  = "0x7f"   # 

     output from parser-cmd (stdout):
       {
         "comment-del": {"type": "string", "value": "0x7f"}
       }

     want:
       Exit code 1

FAIL invalid/control/comment-ff
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       comment-ff   = "0x7f"   # 

     output from parser-cmd (stdout):
       {
         "comment-ff": {"type": "string", "value": "0x7f"}
       }

     want:
       Exit code 1

FAIL invalid/control/comment-lf
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       comment-lf   = "ctrl-P" # 

     output from parser-cmd (stdout):
       {
         "comment-lf": {"type": "string", "value": "ctrl-P"}
       }

     want:
       Exit code 1

FAIL invalid/control/comment-null
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       comment-null = "null"   #  

     output from parser-cmd (stdout):
       {
         "comment-null": {"type": "string", "value": "null"}
       }

     want:
       Exit code 1

FAIL invalid/control/comment-us
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       comment-us   = "ctrl-_" # 

     output from parser-cmd (stdout):
       {
         "comment-us": {"type": "string", "value": "ctrl-_"}
       }

     want:
       Exit code 1

FAIL invalid/control/multi-cr
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       multi-cr   = """null"""

     output from parser-cmd (stdout):
       {
         "multi-cr": {"type": "string", "value": "null\r"}
       }

     want:
       Exit code 1

FAIL invalid/control/multi-del
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       multi-del  = """null"""

     output from parser-cmd (stdout):
       {
         "multi-del": {"type": "string", "value": "null"}
       }

     want:
       Exit code 1

FAIL invalid/control/multi-lf
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       multi-lf   = """null"""

     output from parser-cmd (stdout):
       {
         "multi-lf": {"type": "string", "value": "null\u0010"}
       }

     want:
       Exit code 1

FAIL invalid/control/multi-null
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       multi-null = """null """

     output from parser-cmd (stdout):
       {
         "multi-null": {"type": "string", "value": "null\u0000"}
       }

     want:
       Exit code 1

FAIL invalid/control/multi-us
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       multi-us   = """null"""

     output from parser-cmd (stdout):
       {
         "multi-us": {"type": "string", "value": "null\u001f"}
       }

     want:
       Exit code 1

FAIL invalid/control/rawmulti-cd
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       rawmulti-cd   = '''null'''

     output from parser-cmd (stdout):
       {
         "rawmulti-cd": {"type": "string", "value": "null\r"}
       }

     want:
       Exit code 1

FAIL invalid/control/rawmulti-del
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       rawmulti-del  = '''null'''

     output from parser-cmd (stdout):
       {
         "rawmulti-del": {"type": "string", "value": "null"}
       }

     want:
       Exit code 1

FAIL invalid/control/rawmulti-lf
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       rawmulti-lf   = '''null'''

     output from parser-cmd (stdout):
       {
         "rawmulti-lf": {"type": "string", "value": "null\u0010"}
       }

     want:
       Exit code 1

FAIL invalid/control/rawmulti-null
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       rawmulti-null = '''null '''

     output from parser-cmd (stdout):
       {
         "rawmulti-null": {"type": "string", "value": "null\u0000"}
       }

     want:
       Exit code 1

FAIL invalid/control/rawmulti-us
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       rawmulti-us   = '''null'''

     output from parser-cmd (stdout):
       {
         "rawmulti-us": {"type": "string", "value": "null\u001f"}
       }

     want:
       Exit code 1

FAIL invalid/control/rawstring-del
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       rawstring-del  = 'null'

     output from parser-cmd (stdout):
       {
         "rawstring-del": {"type": "string", "value": "null"}
       }

     want:
       Exit code 1

FAIL invalid/control/rawstring-lf
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       rawstring-lf   = 'null'

     output from parser-cmd (stdout):
       {
         "rawstring-lf": {"type": "string", "value": "null\u0010"}
       }

     want:
       Exit code 1

FAIL invalid/control/rawstring-null
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       rawstring-null = 'null '

     output from parser-cmd (stdout):
       {
         "rawstring-null": {"type": "string", "value": "null\u0000"}
       }

     want:
       Exit code 1

FAIL invalid/control/rawstring-us
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       rawstring-us   = 'null'

     output from parser-cmd (stdout):
       {
         "rawstring-us": {"type": "string", "value": "null\u001f"}
       }

     want:
       Exit code 1

FAIL invalid/control/string-bs
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       string-bs   = "backspace"

     output from parser-cmd (stdout):
       {
         "string-bs": {"type": "string", "value": "backspace\b"}
       }

     want:
       Exit code 1

FAIL invalid/control/string-del
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       string-del  = "null"

     output from parser-cmd (stdout):
       {
         "string-del": {"type": "string", "value": "null"}
       }

     want:
       Exit code 1

FAIL invalid/control/string-lf
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       string-lf   = "null"

     output from parser-cmd (stdout):
       {
         "string-lf": {"type": "string", "value": "null\u0010"}
       }

     want:
       Exit code 1

FAIL invalid/control/string-null
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       string-null = "null "

     output from parser-cmd (stdout):
       {
         "string-null": {"type": "string", "value": "null\u0000"}
       }

     want:
       Exit code 1

FAIL invalid/control/string-us
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       string-us   = "null"

     output from parser-cmd (stdout):
       {
         "string-us": {"type": "string", "value": "null\u001f"}
       }

     want:
       Exit code 1

FAIL invalid/float/leading-zero
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       leading-zero = 03.14

     output from parser-cmd (stdout):
       {
         "leading-zero": {"type": "float", "value": 3}
       }

     want:
       Exit code 1

FAIL invalid/float/leading-zero-neg
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       leading-zero-neg = -03.14

     output from parser-cmd (stdout):
       {
         "leading-zero-neg": {"type": "float", "value": -3}
       }

     want:
       Exit code 1

FAIL invalid/float/leading-zero-plus
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       leading-zero-plus = +03.14

     output from parser-cmd (stdout):
       {
         "leading-zero-plus": {"type": "float", "value": 3}
       }

     want:
       Exit code 1

FAIL invalid/inline-table/duplicate-key-3
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       tbl = { fruit = { apple.color = "red" }, fruit.apple.texture = { smooth = true } }

     output from parser-cmd (stdout):
       {
         "tbl": {
           "fruit": {
             "apple": {
               "color": {"type": "string", "value": "red"},
               "texture": {
                 "smooth": {"type": "bool", "value": true}
               }
             }
           }
         }
       }

     want:
       Exit code 1

FAIL invalid/inline-table/overwrite-01
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       a.b=0
       # Since table "a" is already defined, it can't be replaced by an inline table.
       a={}

     output from parser-cmd (stdout):
       {
         "a": {
           "b": {"type": "integer", "value": 0}
         }
       }

     want:
       Exit code 1

FAIL invalid/inline-table/overwrite-02
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       a={}
       # Inline tables are immutable and can't be extended
       [a.b]

     output from parser-cmd (stdout):
       {
         "a": {
           "b": {}
         }
       }

     want:
       Exit code 1

FAIL invalid/inline-table/overwrite-05
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       inline-t = { nest = {} }

       [inline-t.nest]

     output from parser-cmd (stdout):
       {
         "inline-t": {
           "nest": {}
         }
       }

     want:
       Exit code 1

FAIL invalid/inline-table/overwrite-08
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       tab = { inner = { dog = "best" }, inner.cat = "worst" }

     output from parser-cmd (stdout):
       {
         "tab": {
           "inner": {
             "cat": {"type": "string", "value": "worst"},
             "dog": {"type": "string", "value": "best"}
           }
         }
       }

     want:
       Exit code 1

FAIL invalid/integer/leading-zero-1
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       leading-zero-1 = 01

     output from parser-cmd (stdout):
       {
         "leading-zero-1": {"type": "integer", "value": 1}
       }

     want:
       Exit code 1

FAIL invalid/integer/leading-zero-2
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       leading-zero-2 = 00

     output from parser-cmd (stdout):
       {
         "leading-zero-2": {"type": "integer", "value": 0}
       }

     want:
       Exit code 1

FAIL invalid/integer/leading-zero-sign-1
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       leading-zero-sign-1 = -01

     output from parser-cmd (stdout):
       {
         "leading-zero-sign-1": {"type": "integer", "value": -1}
       }

     want:
       Exit code 1

FAIL invalid/integer/leading-zero-sign-2
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       leading-zero-sign-2 = +01

     output from parser-cmd (stdout):
       {
         "leading-zero-sign-2": {"type": "integer", "value": 1}
       }

     want:
       Exit code 1

FAIL invalid/key/after-array
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       [[agencies]] owner = "S Cjelli"

     output from parser-cmd (stdout):
       {
         "agencies": [{
           "owner": {"type": "string", "value": "S Cjelli"}
         }]
       }

     want:
       Exit code 1

FAIL invalid/key/after-table
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       [error] this = "should not be here"

     output from parser-cmd (stdout):
       {
         "error": {
           "this": {"type": "string", "value": "should not be here"}
         }
       }

     want:
       Exit code 1

FAIL invalid/key/after-value
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       first = "Tom" last = "Preston-Werner" # INVALID

     output from parser-cmd (stdout):
       {
         "first": {"type": "string", "value": "Tom"},
         "last":  {"type": "string", "value": "Preston-Werner"}
       }

     want:
       Exit code 1

FAIL invalid/key/no-eol
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       a = 1 b = 2

     output from parser-cmd (stdout):
       {
         "a": {"type": "integer", "value": 1},
         "b": {"type": "integer", "value": 2}
       }

     want:
       Exit code 1

FAIL invalid/spec/inline-table-2-0
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       [product]
       type = { name = "Nail" }
       type.edible = false  # INVALID

     output from parser-cmd (stdout):
       {
         "product": {
           "type": {
             "edible": {"type": "bool", "value": false},
             "name":   {"type": "string", "value": "Nail"}
           }
         }
       }

     want:
       Exit code 1

FAIL invalid/spec/inline-table-3-0
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       [product]
       type.name = "Nail"
       type = { edible = false }  # INVALID

     output from parser-cmd (stdout):
       {
         "product": {
           "type": {
             "edible": {"type": "bool", "value": false},
             "name":   {"type": "string", "value": "Nail"}
           }
         }
       }

     want:
       Exit code 1

FAIL invalid/spec/table-9-0
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       [fruit]
       apple.color = "red"
       apple.taste.sweet = true

       [fruit.apple]  # INVALID
       # [fruit.apple.taste]  # INVALID

       [fruit.apple.texture]  # you can add sub-tables
       smooth = true

     output from parser-cmd (stdout):
       {
         "fruit": {
           "apple": {
             "color": {"type": "string", "value": "red"},
             "taste": {
               "sweet": {"type": "bool", "value": true}
             },
             "texture": {
               "smooth": {"type": "bool", "value": true}
             }
           }
         }
       }

     want:
       Exit code 1

FAIL invalid/spec/table-9-1
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       [fruit]
       apple.color = "red"
       apple.taste.sweet = true

       # [fruit.apple]  # INVALID
       [fruit.apple.taste]  # INVALID

       [fruit.apple.texture]  # you can add sub-tables
       smooth = true

     output from parser-cmd (stdout):
       {
         "fruit": {
           "apple": {
             "color": {"type": "string", "value": "red"},
             "taste": {
               "sweet": {"type": "bool", "value": true}
             },
             "texture": {
               "smooth": {"type": "bool", "value": true}
             }
           }
         }
       }

     want:
       Exit code 1

FAIL invalid/string/bad-byte-escape
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       naughty = "\xAg"

     output from parser-cmd (stdout):
       {
         "naughty": {"type": "string", "value": "\\xAg"}
       }

     want:
       Exit code 1

FAIL invalid/string/bad-escape-1
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       invalid-escape = "This string has a bad \a escape character."

     output from parser-cmd (stdout):
       {
         "invalid-escape": {"type": "string", "value": "This string has a bad \\a escape character."}
       }

     want:
       Exit code 1

FAIL invalid/string/bad-escape-2
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       invalid-escape = "This string has a bad \  escape character."

     output from parser-cmd (stdout):
       {
         "invalid-escape": {"type": "string", "value": "This string has a bad \\  escape character."}
       }

     want:
       Exit code 1

FAIL invalid/string/bad-hex-esc-1
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       bad-hex-esc-1 = "\x0g"

     output from parser-cmd (stdout):
       {
         "bad-hex-esc-1": {"type": "string", "value": "\\x0g"}
       }

     want:
       Exit code 1

FAIL invalid/string/bad-hex-esc-2
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       bad-hex-esc-2 = "\xG0"

     output from parser-cmd (stdout):
       {
         "bad-hex-esc-2": {"type": "string", "value": "\\xG0"}
       }

     want:
       Exit code 1

FAIL invalid/string/bad-hex-esc-3
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       bad-hex-esc-3 = "\x"

     output from parser-cmd (stdout):
       {
         "bad-hex-esc-3": {"type": "string", "value": "\\x"}
       }

     want:
       Exit code 1

FAIL invalid/string/bad-hex-esc-4
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       bad-hex-esc-4 = "\x 50"

     output from parser-cmd (stdout):
       {
         "bad-hex-esc-4": {"type": "string", "value": "\\x 50"}
       }

     want:
       Exit code 1

FAIL invalid/string/bad-hex-esc-5
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       bad-hex-esc-5 = "\x 50"

     output from parser-cmd (stdout):
       {
         "bad-hex-esc-5": {"type": "string", "value": "\\x 50"}
       }

     want:
       Exit code 1

FAIL invalid/string/bad-slash-escape
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       invalid-escape = "This string has a bad \/ escape character."

     output from parser-cmd (stdout):
       {
         "invalid-escape": {"type": "string", "value": "This string has a bad \\/ escape character."}
       }

     want:
       Exit code 1

FAIL invalid/string/bad-uni-esc-1
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       bad-uni-esc-1 = "val\ue"

     output from parser-cmd (stdout):
       {
         "bad-uni-esc-1": {"type": "string", "value": "val\\ue"}
       }

     want:
       Exit code 1

FAIL invalid/string/bad-uni-esc-2
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       bad-uni-esc-2 = "val\Ux"

     output from parser-cmd (stdout):
       {
         "bad-uni-esc-2": {"type": "string", "value": "val\\Ux"}
       }

     want:
       Exit code 1

FAIL invalid/string/bad-uni-esc-3
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       bad-uni-esc-3 = "val\U0000000"

     output from parser-cmd (stdout):
       {
         "bad-uni-esc-3": {"type": "string", "value": "val\\U0000000"}
       }

     want:
       Exit code 1

FAIL invalid/string/bad-uni-esc-4
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       bad-uni-esc-4 = "val\U0000"

     output from parser-cmd (stdout):
       {
         "bad-uni-esc-4": {"type": "string", "value": "val\\U0000"}
       }

     want:
       Exit code 1

FAIL invalid/string/bad-uni-esc-5
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       bad-uni-esc-5 = "val\Ugggggggg"

     output from parser-cmd (stdout):
       {
         "bad-uni-esc-5": {"type": "string", "value": "val\\Ugggggggg"}
       }

     want:
       Exit code 1

FAIL invalid/string/bad-uni-esc-6
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       bad-uni-esc-6 = "This string contains a non scalar unicode codepoint \uD801"

     output from parser-cmd (stdout):
       {
         "bad-uni-esc-6": {"type": "string", "value": "This string contains a non scalar unicode codepoint \\uD801"}
       }

     want:
       Exit code 1

FAIL invalid/string/bad-uni-esc-7
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       bad-uni-esc-7 = "\uabag"

     output from parser-cmd (stdout):
       {
         "bad-uni-esc-7": {"type": "string", "value": "\\uabag"}
       }

     want:
       Exit code 1

FAIL invalid/string/basic-byte-escapes
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       answer = "\x33"

     output from parser-cmd (stdout):
       {
         "answer": {"type": "string", "value": "\\x33"}
       }

     want:
       Exit code 1

FAIL invalid/string/basic-multiline-out-of-range-unicode-escape-1
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       a = """\UFFFFFFFF"""

     output from parser-cmd (stdout):
       {
         "a": {"type": "string", "value": "\\UFFFFFFFF"}
       }

     want:
       Exit code 1

FAIL invalid/string/basic-multiline-out-of-range-unicode-escape-2
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       a = """\U00D80000"""

     output from parser-cmd (stdout):
       {
         "a": {"type": "string", "value": "\\U00D80000"}
       }

     want:
       Exit code 1

FAIL invalid/string/basic-multiline-unknown-escape
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       a = """\@"""

     output from parser-cmd (stdout):
       {
         "a": {"type": "string", "value": "\\@"}
       }

     want:
       Exit code 1

FAIL invalid/string/basic-out-of-range-unicode-escape-1
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       a = "\UFFFFFFFF"

     output from parser-cmd (stdout):
       {
         "a": {"type": "string", "value": "\\UFFFFFFFF"}
       }

     want:
       Exit code 1

FAIL invalid/string/basic-out-of-range-unicode-escape-2
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       a = "\U00D80000"

     output from parser-cmd (stdout):
       {
         "a": {"type": "string", "value": "\\U00D80000"}
       }

     want:
       Exit code 1

FAIL invalid/string/basic-unknown-escape
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       a = "\@"

     output from parser-cmd (stdout):
       {
         "a": {"type": "string", "value": "\\@"}
       }

     want:
       Exit code 1

FAIL invalid/string/multiline-bad-escape-1
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       k = """t\a"""

     output from parser-cmd (stdout):
       {
         "k": {"type": "string", "value": "t\\a"}
       }

     want:
       Exit code 1

FAIL invalid/string/multiline-bad-escape-2
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       # \<Space> is not a valid escape.
       k = """t\ t"""

     output from parser-cmd (stdout):
       {
         "k": {"type": "string", "value": "t\\ t"}
       }

     want:
       Exit code 1

FAIL invalid/string/multiline-bad-escape-3
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       # \<Space> is not a valid escape.
       k = """t\ """

     output from parser-cmd (stdout):
       {
         "k": {"type": "string", "value": "t\\ "}
       }

     want:
       Exit code 1

FAIL invalid/string/multiline-bad-escape-4
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       backslash = """\"""

     output from parser-cmd (stdout):
       {
         "backslash": {"type": "string", "value": "\\"}
       }

     want:
       Exit code 1

FAIL invalid/string/multiline-escape-space-1
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       a = """
         foo \ \n
         bar"""

     output from parser-cmd (stdout):
       {
         "a": {"type": "string", "value": "\n  foo \\ \\n\n  bar"}
       }

     want:
       Exit code 1

FAIL invalid/string/multiline-escape-space-2
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       bee = """
       hee \

       gee \   """

     output from parser-cmd (stdout):
       {
         "bee": {"type": "string", "value": "\nhee \\\n\ngee \\   "}
       }

     want:
       Exit code 1

FAIL invalid/table/append-with-dotted-keys-1
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       # First a.b.c defines a table: a.b.c = {z=9}
       #
       # Then we define a.b.c.t = "str" to add a str to the above table, making it:
       #
       #   a.b.c = {z=9, t="..."}
       #
       # While this makes sense, logically, it was decided this is not valid TOML as
       # it's too confusing/convoluted.
       #
       # See: https://github.com/toml-lang/toml/issues/846
       #      https://github.com/toml-lang/toml/pull/859

       [a.b.c]
         z = 9

       [a]
         b.c.t = "Using dotted keys to add to [a.b.c] after explicitly defining it above is not allowed"

     output from parser-cmd (stdout):
       {
         "a": {
           "b": {
             "c": {
               "z": {"type": "integer", "value": 9},
               "t": {
                 "type":  "string",
                 "value": "Using dotted keys to add to [a.b.c] after explicitly defining it above is not allowed"
               }
             }
           }
         }
       }

     want:
       Exit code 1

FAIL invalid/table/append-with-dotted-keys-2
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       # This is the same issue as in injection-1.toml, except that nests one level
       # deeper. See that file for a more complete description.

       [a.b.c.d]
         z = 9

       [a]
         b.c.d.k.t = "Using dotted keys to add to [a.b.c.d] after explicitly defining it above is not allowed"

     output from parser-cmd (stdout):
       {
         "a": {
           "b": {
             "c": {
               "d": {
                 "z": {"type": "integer", "value": 9},
                 "k": {
                   "t": {
                     "type":  "string",
                     "value": "Using dotted keys to add to [a.b.c.d] after explicitly defining it above is not allowed"
                   }
                 }
               }
             }
           }
         }
       }

     want:
       Exit code 1

FAIL invalid/table/duplicate
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       [a]
       b = 1

       [a]
       c = 2

     output from parser-cmd (stdout):
       {
         "a": {
           "b": {"type": "integer", "value": 1},
           "c": {"type": "integer", "value": 2}
         }
       }

     want:
       Exit code 1

FAIL invalid/table/duplicate-key-dotted-table
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       [fruit]
       apple.color = "red"

       [fruit.apple] # INVALID

     output from parser-cmd (stdout):
       {
         "fruit": {
           "apple": {
             "color": {"type": "string", "value": "red"}
           }
         }
       }

     want:
       Exit code 1

FAIL invalid/table/duplicate-key-dotted-table2
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       [fruit]
       apple.taste.sweet = true

       [fruit.apple.taste] # INVALID

     output from parser-cmd (stdout):
       {
         "fruit": {
           "apple": {
             "taste": {
               "sweet": {"type": "bool", "value": true}
             }
           }
         }
       }

     want:
       Exit code 1

FAIL invalid/table/redefine-2
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       [t1]
       t2.t3.v = 0
       [t1.t2]

     output from parser-cmd (stdout):
       {
         "t1": {
           "t2": {
             "t3": {
               "v": {"type": "integer", "value": 0}
             }
           }
         }
       }

     want:
       Exit code 1

FAIL invalid/table/redefine-3
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       [t1]
       t2.t3.v = 0
       [t1.t2.t3]

     output from parser-cmd (stdout):
       {
         "t1": {
           "t2": {
             "t3": {
               "v": {"type": "integer", "value": 0}
             }
           }
         }
       }

     want:
       Exit code 1

FAIL invalid/table/super-twice
     Expected an error, but no error was reported.

     input sent to parser-cmd:
       [a.b]
       [a]
       [a]

     output from parser-cmd (stdout):
       {
         "a": {
           "b": {}
         }
       }

     want:
       Exit code 1

toml-test v0001-01-01 [cargo decode]: using embedded tests
  valid tests:  36 passed, 146 failed
invalid tests: 288 passed, 83 failed
