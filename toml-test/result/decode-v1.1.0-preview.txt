FAIL valid/key/numeric-dotted
     Could not find key "1" in parser output.

     input sent to parser-cmd:
       1.2 = 3

     output from parser-cmd (stdout):
       {
         "1.2": {"type": "integer", "value": "3"}
       }

     want:
       {
           "1": {
               "2": {"type": "integer", "value": "3"}
           }
       }

FAIL valid/key/unicode
     invalid token in 2:0..2:1
     invalid token in 3:0..3:1
     invalid key in 4:0..4:3
     invalid token in 5:0..5:3
     invalid token in 7:1..7:3
     invalid token in 8:0..8:2
     invalid token in 8:6..8:8
     invalid key in 10:2..10:12
     invalid key in 11:0..11:6
     invalid key in 11:7..11:15
     invalid key in 13:2..13:12
     invalid key in 14:0..14:7
     invalid key in 14:8..14:16
     unknown line in 2:10..3:0
     unknown line in 3:10..4:0
     unknown line in 4:11..5:0
     unknown line in 5:28..6:0
     expected key in 7:1..7:3
     expected ']' in 7:1..7:3
     expected key in 8:0..8:2
     expected '=' in 8:0..8:2
     expected value in 8:0..8:30
     expected key in 10:2..10:12
     expected ']]' in 10:2..10:12
     expected key in 11:0..11:6
     expected '=' in 11:0..11:6
     expected value in 11:0..11:25
     expected key in 13:2..13:12
     expected ']]' in 13:2..13:12
     expected key in 14:0..14:7
     expected '=' in 14:0..14:7
     expected value in 14:0..14:28
     Error: invalid toml
 
     Exit 1

     input sent to parser-cmd:
       # TOML 1.1 supports Unicode for bare keys.

       ‚Ç¨ = 'Euro'
       üòÇ = "rofl"
       a‚Äçb = "zwj"
       √ÖAÃä = "U+00C5 U+0041 U+030A"

       [‰∏≠Êñá]
       ‰∏≠Êñá = {‰∏≠Êñá = "Chinese language"}

       [[ti·∫øng-Vi·ªát]]
       ti…ô≈ãÀßÀ¶.vi…ôtÃöÀßÀ® î = "north"

       [[ti·∫øng-Vi·ªát]]
       ti…ô≈ãÀ¶ÀßÀ•.vi…ôkÃöÀ®À© î = "central"

     output from parser-cmd (stderr):
       invalid token in 2:0..2:1
       invalid token in 3:0..3:1
       invalid key in 4:0..4:3
       invalid token in 5:0..5:3
       invalid token in 7:1..7:3
       invalid token in 8:0..8:2
       invalid token in 8:6..8:8
       invalid key in 10:2..10:12
       invalid key in 11:0..11:6
       invalid key in 11:7..11:15
       invalid key in 13:2..13:12
       invalid key in 14:0..14:7
       invalid key in 14:8..14:16
       unknown line in 2:10..3:0
       unknown line in 3:10..4:0
       unknown line in 4:11..5:0
       unknown line in 5:28..6:0
       expected key in 7:1..7:3
       expected ']' in 7:1..7:3
       expected key in 8:0..8:2
       expected '=' in 8:0..8:2
       expected value in 8:0..8:30
       expected key in 10:2..10:12
       expected ']]' in 10:2..10:12
       expected key in 11:0..11:6
       expected '=' in 11:0..11:6
       expected value in 11:0..11:25
       expected key in 13:2..13:12
       expected ']]' in 13:2..13:12
       expected key in 14:0..14:7
       expected '=' in 14:0..14:7
       expected value in 14:0..14:28
       Error: invalid toml

       Exit 1

     want:
          <empty>

FAIL valid/spec/keys-7
     Could not find key "3" in parser output.

     input sent to parser-cmd:
       3.14159 = "pi"

     output from parser-cmd (stdout):
       {
         "3.14159": {"type": "string", "value": "pi"}
       }

     want:
       {
           "3": {
               "14159": {"type": "string", "value": "pi"}
           }
       }

FAIL valid/string/escape-tricky
     invalid basic string in 0:10..1:33
     expected value in 0:10..1:33
     Error: invalid toml
 
     Exit 1

     input sent to parser-cmd:
       end_esc = "String does not end here\" but ends here\\"
       lit_end_esc = 'String ends here\'

       multiline_unicode = """
       \u00a0"""

       multiline_not_unicode = """
       \\u0041"""

       multiline_end_esc = """When will it end? \"""...""\" should be here\""""

       lit_multiline_not_unicode = '''
       \u007f'''

       lit_multiline_end = '''There is no escape\'''

     output from parser-cmd (stderr):
       invalid basic string in 0:10..1:33
       expected value in 0:10..1:33
       Error: invalid toml

       Exit 1

     want:
          <empty>

FAIL valid/string/hex-escape
     invalid string: invalid escape sequence
     invalid string: invalid escape sequence
     invalid string: invalid escape sequence
     invalid string: invalid escape sequence
     invalid string: invalid escape sequence
     invalid string: invalid escape sequence
     Error: invalid toml
 
     Exit 1

     input sent to parser-cmd:
       # \x for the first 255 codepoints

       whitespace      = "\x20 \x09 \x1b \x0d\x0a"
       bs              = "\x7f"
       nul             = "\x00"
       hello           = "\x68\x65\x6c\x6c\x6f\x0a"
       higher-than-127 = "S\xf8rmirb\xe6ren"

       multiline = """
       \x20 \x09 \x1b \x0d\x0a
       \x7f
       \x00
       \x68\x65\x6c\x6c\x6f\x0a
       \x53\xF8\x72\x6D\x69\x72\x62\xE6\x72\x65\x6E
       """

       # Not inside literals.
       literal = '\x20 \x09 \x0d\x0a'
       multiline-literal = '''
       \x20 \x09 \x0d\x0a
       '''

     output from parser-cmd (stderr):
       invalid string: invalid escape sequence
       invalid string: invalid escape sequence
       invalid string: invalid escape sequence
       invalid string: invalid escape sequence
       invalid string: invalid escape sequence
       invalid string: invalid escape sequence
       Error: invalid toml

       Exit 1

     want:
          <empty>

FAIL valid/table/names
     Could not find key "x.1" in parser output.

     input sent to parser-cmd:
       [a.b.c]
       [a."b.c"]
       [a.'d.e']
       [a.' x ']
       [ d.e.f ]
       [ g . h . i ]
       [ j . " û" . 'l' ]

       [x.1.2]

     output from parser-cmd (stdout):
       {
         "a": {
           " x ": {},
           "b.c": {},
           "d.e": {},
           "b": {
             "c": {}
           }
         },
         "d": {
           "e": {
             "f": {}
           }
         },
         "g": {
           "h": {
             "i": {}
           }
         },
         "j": {
           " û": {
             "l": {}
           }
         },
         "x": {
           "1.2": {}
         }
       }

     want:
       {
           "a": {
               " x ": {},
               "b.c": {},
               "d.e": {},
               "b": {
                   "c": {}
               }
           },
           "d": {
               "e": {
                   "f": {}
               }
           },
           "g": {
               "h": {
                   "i": {}
               }
           },
           "j": {
               " û": {
                   "l": {}
               }
           },
           "x": {
               "1": {
                   "2": {}
               }
           }
       }

toml-test v0001-01-01 [/Users/s23467/develop/tombi/target/debug/decode --toml-version v1.1.0-preview]: using embedded tests
  valid tests: 181 passed,  6 failed
invalid tests: 361 passed,  0 failed
