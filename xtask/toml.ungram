// TOML Un-Grammar.
//
// This grammar specifies the structure of TOML's concrete syntax tree.
// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).
// Tokens are processed -- contextual keywords are recognised, compound operators glued.
//
// Legend:
//
//   //                          -- comment
//   Name =                      -- non-terminal definition
//   'ident'                     -- token (terminal)
//   A B                         -- sequence
//   A | B                       -- alternation
//   A*                          -- zero or more repetition
//   (A (',' A)* ','?)            -- repetition of node A separated by ',' and allowing a trailing comma
//   (A (',' A)*)                -- repetition of node A separated by ',' without a trailing comma
//   A?                          -- zero or one repetition
//   (A)                         -- same as A
//   label:A                     -- suggested name for field of AST node

KeyValue = Key '=' Value

Key = BareKey | QuotedKey | DottedKeys
BareKey = '@bare_key'
QuotedKey = '@basic_string' | '@literal_string'
DottedKeys = DottedKey ('.' DottedKey)*
DottedKey = BareKey | QuotedKey

Value =
    String
    | Integer
    | Float
    | Boolean
    | OffsetDateTime
    | LocalDateTime
    | LocalDate
    | LocalTime
    | Array
    | InlineTable

String = 
    '@basic_string'
    | '@multi_line_basic_string'
    | '@literal_string'
    | '@multi_line_literal_string'
Integer = 
    '@integer_dec'
    | '@integer_hex'
    | '@integer_oct'
    | '@integer_bin'
Float = value: '@float'
Boolean = value: ('true' | 'false')
OffsetDateTime = value: '@offset_date_time'
LocalDateTime = value: '@local_date_time'
LocalDate = value: '@local_date'
LocalTime = value: '@local_time'

Array = '[' elements: (Value (',' Value)* ','?) ']'
Table = '[' header: Key ']' KeyValue*
InlineTable = '{' elements: (KeyValue (',' KeyValue)* ','?) '}'
ArrayOfTable = '[[' header: Key ']]' KeyValue*

Root = RootItem*

RootItem =
    KeyValue
    | Table
    | ArrayOfTable
