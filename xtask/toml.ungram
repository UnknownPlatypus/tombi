// TOML Un-Grammar.
//
// This grammar specifies the structure of TOML's concrete syntax tree.
// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).
// Tokens are processed -- contextual keywords are recognised, compound operators glued.
//
// Legend:
//
//   //                          -- comment
//   Name =                      -- non-terminal definition
//   'ident'                     -- token (terminal)
//   A B                         -- sequence
//   A | B                       -- alternation
//   A*                          -- zero or more repetition
//   (A (',' A)* ','?)            -- repetition of node A separated by ',' and allowing a trailing comma
//   (A (',' A)*)                -- repetition of node A separated by ',' without a trailing comma
//   A?                          -- zero or one repetition
//   (A)                         -- same as A
//   label:A                     -- suggested name for field of AST node

Root =
    value: RootValue*
    eof: 'EOF'

RootValue =
    KeyValue
    | Table
    | ArrayOfTable

KeyValue = key: Key '=' value: Value

Key = SingleKey ('.' SingleKey)*
SingleKey = 'bare_key' | 'quoted_key'

Value =
    String
    | Integer
    | Float
    | Boolean
    | OffsetDatetime
    | LocalDatetime
    | LocalDate
    | LocalTime
    | Array
    | InlineTable

String = value: 'basic_string' | 'literal_string'
Integer = value: 'integer'
Float = value: 'float'
Boolean = value_token: ('true' | 'false')
OffsetDatetime = value: 'offset_date_time'
LocalDatetime = value: 'local_date_time'
LocalDate = value: 'local_date'
LocalTime = value: 'local_time'

Array = '[' elements: ArrayElementList ']'
ArrayElementList = (Value (',' Value)* ','?)

InlineTable = '{' elements: InlineTableElementList '}'
InlineTableElementList = (KeyValue (',' KeyValue)* ','?)

Table = '[' header: Key ']'

ArrayOfTable = '[[' header: Key ']]'
