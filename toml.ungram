// TOML Un-Grammar.
//
// This grammar specifies the structure of TOML's concrete syntax tree.
// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).
// Tokens are processed -- contextual keywords are recognised, compound operators glued.
//
// Legend:
//
//   //                          -- comment
//   Name =                      -- non-terminal definition
//   'ident'                     -- token (terminal)
//   A B                         -- sequence
//   A | B                       -- alternation
//   A*                          -- zero or more repetition
//   (A (',' A)* ','?)            -- repetition of node A separated by ',' and allowing a trailing comma
//   (A (',' A)*)                -- repetition of node A separated by ',' without a trailing comma
//   A?                          -- zero or one repetition
//   (A)                         -- same as A
//   label:A                     -- suggested name for field of AST node


BareKey = '@bare_key'
BasicString = '@basic_string'
MultiLineBasicString = '@multi_line_basic_string'
LiteralString = '@literal_string'
MultiLineLiteralString = '@multi_line_literal_string'
IntegerBin = '@integer_bin'
IntegerOct = '@integer_oct'
IntegerDec = '@integer_dec'
IntegerHex = '@integer_hex'
Float = '@float'
Boolean = '@boolean'
OffsetDateTime = '@offset_date_time'
LocalDateTime = '@local_date_time'
LocalDate = '@local_date'
LocalTime = '@local_time'
// Comma may be followed by a comment, so it is treated as a Node.
Comma = ','

Key = BareKey | BasicString | LiteralString
Keys = Key ('.' Key)*

Value =
    BasicString | MultiLineBasicString | LiteralString | MultiLineLiteralString
    | IntegerBin | IntegerOct | IntegerDec | IntegerHex
    | Float
    | Boolean
    | OffsetDateTime | LocalDateTime | LocalDate | LocalTime
    | Array
    | InlineTable

KeyValue = Keys '=' Value
Array = '[' values: (Value (',' Value)* ','?) ']'
Table = '[' header: Keys ']' KeyValue*
InlineTable = '{' entries: (KeyValue (',' KeyValue)* ','?) '}'
ArrayOfTable = '[[' header: Keys ']]' KeyValue*

Root = RootItem*

RootItem =
    KeyValue
    | Table
    | ArrayOfTable
